{
    "bindings": [
        {
            "author": "Gerhard Riegler",
            "description": "Das Astro Binding berechnet astronomische Daten von Sonne und Mond.",
            "id": "astro",
            "name": "Astro Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.astro"
        },
        {
            "author": "David Graeff",
            "description": "Unterstützt die Raspbee und Conbee Zigbee Dongles via Deconz",
            "id": "deconz",
            "name": "Dresden Elektronik Deconz",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.deconz"
        },
        {
            "author": "Deutsche Telekom AG",
            "description": "Dieses Binding integriert das Philips Hue System. Durch diese können die Hue Lampen und Leuchten gesteuert werden. ",
            "id": "hue",
            "name": "Hue Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.hue"
        },
        {
            "author": "David Graeff",
            "description": "Erlaubt die Verwaltung von MQTT Verbindungen und das Verknüpfen von MQTT Topics",
            "id": "mqtt",
            "name": "MQTT Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.mqtt",
            "custompages": [
                {
                    "uri": "dummydata/mqtt.html",
                    "label": "MQTT Traffic monitor"
                }
            ]
        },
        {
            "author": "Marc Mettke, David Graeff",
            "description": "Das Network Binding überprüft, ob sich ein Gerät aktuell im Netzwerk befindet oder nicht.",
            "id": "network",
            "name": "Network Binding",
            "configDescriptionURI": "binding:network",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.network"
        }
    ],
    "binding-config": [],
    "channel-types": [
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes in Tagen",
            "label": "Mondalter",
            "itemType": "Number:Time",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:age",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes",
            "label": "Mondalter",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:ageDegree",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes",
            "label": "Mondalter",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:agePercent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Herbstanfang",
            "label": "Herbst",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:autumn",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Azimut des Himmelskörpers",
            "label": "Azimut",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:azimuth",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Höhe der Strahlung, nach Beugung durch Wolken und Atmosphäre",
            "label": "Diffuse Strahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:diffuseRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Höhe der Strahlung nach Eindringen in die atmosphärische Schicht",
            "label": "Direkte Strahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:directRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Entfernung des Objekts",
            "label": "Entfernung",
            "itemType": "Number:Length",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:distance",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt wenn der Abstand erreicht ist",
            "label": "Datum",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:distanceDate",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon distance event",
            "label": "Moon Distance Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:distanceEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Dauer des Ereignisses",
            "label": "Dauer",
            "itemType": "Number:Time",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:duration",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Höhenwinkel des Himmelskörpers",
            "label": "Höhenwinkel",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:elevation",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Die Endzeit des Ereignisses",
            "label": "Endzeit",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:end",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten erstes Viertels",
            "label": "Erstes Viertel",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:firstQuarter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten Vollmondes",
            "label": "Vollmond",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:fullMoon",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Beleuchtungsstärke des Mondes",
            "label": "Beleuchtungsstärke des Mondes",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.0f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:illumination",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon eclipse event",
            "label": "Moon Eclipse Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:moonEclipseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten Neumondes",
            "label": "Neumond",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:newMoon",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten partiellen Sonnenfinsternis",
            "label": "Partielle Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:partial",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon phase event",
            "label": "Moon Phase Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:phaseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Mondphase",
            "label": "Mondphase",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "NEW",
                        "label": "Neumond"
                    },
                    {
                        "value": "WAXING_CRESCENT",
                        "label": "Zunehmende Sichel"
                    },
                    {
                        "value": "FIRST_QUARTER",
                        "label": "Erstes Viertel"
                    },
                    {
                        "value": "WAXING_GIBBOUS",
                        "label": "Zunehmender Halbmond"
                    },
                    {
                        "value": "FULL",
                        "label": "Vollmond"
                    },
                    {
                        "value": "WANING_GIBBOUS",
                        "label": "Abnehmender Halbmond"
                    },
                    {
                        "value": "THIRD_QUARTER",
                        "label": "Drittes Viertel"
                    },
                    {
                        "value": "WANING_CRESCENT",
                        "label": "Abnehmende Sichel"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:phaseName",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Range event",
            "label": "Range Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:rangeEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten ringförmigen Sonnenfinsternis",
            "label": "Ringförmige Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:ring",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Jahreszeit",
            "label": "Jahreszeit",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "SPRING",
                        "label": "Frühling"
                    },
                    {
                        "value": "SUMMER",
                        "label": "Sommer"
                    },
                    {
                        "value": "AUTUMN",
                        "label": "Herbst"
                    },
                    {
                        "value": "WINTER",
                        "label": "Winter"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:seasonName",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Projiziertes Schattenlängenverhältnis (Abgeleitet vom Höhenwinkel)",
            "label": "Schattenlängenverhältnis",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:shadeLength",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Sternzeichen",
            "label": "Sternzeichen",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "ARIES",
                        "label": "Widder"
                    },
                    {
                        "value": "TAURUS",
                        "label": "Stier"
                    },
                    {
                        "value": "GEMINI",
                        "label": "Zwilling"
                    },
                    {
                        "value": "CANCER",
                        "label": "Krebs"
                    },
                    {
                        "value": "LEO",
                        "label": "Löwe"
                    },
                    {
                        "value": "VIRGO",
                        "label": "Jungfrau"
                    },
                    {
                        "value": "LIBRA",
                        "label": "Waage"
                    },
                    {
                        "value": "SCORPIO",
                        "label": "Skorpion"
                    },
                    {
                        "value": "SAGITTARIUS",
                        "label": "Schütze"
                    },
                    {
                        "value": "CAPRICORN",
                        "label": "Steinbock"
                    },
                    {
                        "value": "AQUARIUS",
                        "label": "Wassermann"
                    },
                    {
                        "value": "PISCES",
                        "label": "Fische"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:sign",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Frühlingsanfang",
            "label": "Frühling",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:spring",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Die Startzeit des Ereignisses",
            "label": "Startzeit",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:start",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Sommeranfang",
            "label": "Sommer",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:summer",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Sun eclipse event",
            "label": "Sun Eclipse Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:sunEclipseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Sonnenphase",
            "label": "Sonnenphase",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "SUN_RISE",
                        "label": "Sonnenaufgang"
                    },
                    {
                        "value": "ASTRO_DAWN",
                        "label": "Astronomische Morgendämmerung"
                    },
                    {
                        "value": "NAUTIC_DAWN",
                        "label": "Nautische Dämmerung"
                    },
                    {
                        "value": "CIVIL_DAWN",
                        "label": "Bürgerliche Morgendämmerung"
                    },
                    {
                        "value": "CIVIL_DUSK",
                        "label": "Bürgerliche Abenddämmerung"
                    },
                    {
                        "value": "NAUTIC_DUSK",
                        "label": "Nautische Abenddämmerung"
                    },
                    {
                        "value": "ASTRO_DUSK",
                        "label": "Astronomische Abenddämmerung"
                    },
                    {
                        "value": "SUN_SET",
                        "label": "Sonnenuntergang"
                    },
                    {
                        "value": "DAYLIGHT",
                        "label": "Tageslicht"
                    },
                    {
                        "value": "NOON",
                        "label": "Mittag"
                    },
                    {
                        "value": "NIGHT",
                        "label": "Nacht"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:sunPhaseName",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten dritten Viertels",
            "label": "Drittes Viertel",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:thirdQuarter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten totalen Sonnenfinsternis",
            "label": "Totale Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:total",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gesamtmenge der Strahlung auf dem Boden",
            "label": "Gesamtstrahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:totalRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Winteranfang",
            "label": "Winter",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:winter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "The Button that was last pressed on the switch.",
            "label": "Button",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:button",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "This channel is triggered on a button event. The trigger payload consists of the button event number.",
            "label": "Button Trigger",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "deconz:buttonevent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current consumption",
            "label": "Consumption",
            "itemType": "Number:Energy",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:consumption",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current current",
            "label": "Current",
            "category": "Energy",
            "itemType": "Number:ElectricCurrent",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:current",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Light level is below the darkness threshold.",
            "label": "Dark",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:dark",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Light level is above the daylight threshold.",
            "label": "Daylight",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:daylight",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current humidity",
            "label": "Humidity",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:humidity",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "The date and time when the sensor was last updated.",
            "label": "Last Updated",
            "category": "Time",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:last_updated",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "A light level",
            "label": "Lightlevel",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "daylight",
                        "label": "Daylight"
                    },
                    {
                        "value": "sunset",
                        "label": "Sunset"
                    },
                    {
                        "value": "dark",
                        "label": "Dark"
                    }
                ]
            },
            "tags": [],
            "UID": "deconz:light",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current light level.",
            "label": "Light Level",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:light_level",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current light illuminance",
            "label": "Illuminance",
            "itemType": "Number:Illuminance",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:lightlux",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Open/Close detected",
            "label": "Open/Close",
            "itemType": "Contact",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:open",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current power usage",
            "label": "Power",
            "category": "Energy",
            "itemType": "Number:Power",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:power",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Presence detected",
            "label": "Presence",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:presence",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current pressure",
            "label": "Pressure",
            "itemType": "Number:Pressure",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:pressure",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current temperature",
            "label": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Dawn is around 130, sunrise at 140, sunset at 190, and dusk at 210",
            "label": "Daylight Value",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:value",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current voltage",
            "label": "Voltage",
            "category": "Energy",
            "itemType": "Number:ElectricPotential",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:voltage",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Water leakage detected",
            "label": "Water Leakage",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:waterleakage",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht ein temporäres Blinken.",
            "label": "Alarm",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": false,
                "options": [
                    {
                        "value": "NONE",
                        "label": "Kein Blinken"
                    },
                    {
                        "value": "SELECT",
                        "label": "Einmaliges Blinken"
                    },
                    {
                        "value": "LSELECT",
                        "label": "Mehrfaches Blinken"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:alert",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Helligkeit. Ermöglicht ebenfalls die Lampe ein- und auszuschalten.",
            "label": "Helligkeit",
            "category": "DimmableLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:brightness",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Farbe. Ermöglicht ebenfalls die Lampe zu dimmen oder ein- und auszuschalten.",
            "label": "Farbe",
            "category": "ColorLight",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:color",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Farbtemperatur. Von Tageslichtweiß (0) bis Warmweiß (100).",
            "label": "Farbtemperatur",
            "category": "ColorLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [],
            "UID": "hue:color_temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Licht Level ist unter dem Dunkel-Schwellwert.",
            "label": "Dunkel",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:dark",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Licht Level ist über dem Hell-Schwellwert.",
            "label": "Hell",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:daylight",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der zuletzt gedrückte Taster an dem Dimmer-Schalter.",
            "label": "Dimmer-Schalter",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": [
                    {
                        "value": "1000",
                        "label": "An (Initial)"
                    },
                    {
                        "value": "1001",
                        "label": "An (Gehalten)"
                    },
                    {
                        "value": "1002",
                        "label": "An (Kurz Gedrückt)"
                    },
                    {
                        "value": "1003",
                        "label": "An (Lang Gedrückt)"
                    },
                    {
                        "value": "2000",
                        "label": "Heller (Initial)"
                    },
                    {
                        "value": "2001",
                        "label": "Heller (Gehalten)"
                    },
                    {
                        "value": "2002",
                        "label": "Heller (Kurz Gedrückt)"
                    },
                    {
                        "value": "2003",
                        "label": "Heller (Lang Gedrückt)"
                    },
                    {
                        "value": "3000",
                        "label": "Dunkler (Initial) "
                    },
                    {
                        "value": "3001",
                        "label": "Dunkler (Gehalten)"
                    },
                    {
                        "value": "3002",
                        "label": "Dunkler (Kurz Gedrückt)"
                    },
                    {
                        "value": "3003",
                        "label": "Dunkler (Lang Gedrückt)"
                    },
                    {
                        "value": "4000",
                        "label": "Aus (Initial)"
                    },
                    {
                        "value": "4001",
                        "label": "Aus (Gehalten)"
                    },
                    {
                        "value": "4002",
                        "label": "Aus (Kurz Gedrückt)"
                    },
                    {
                        "value": "4003",
                        "label": "Aus (Lang Gedrückt)"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:dimmer_switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Triggers when a button is pressed on the dimmer switch.",
            "label": "Dimmer Switch Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "hue:dimmer_switch_event",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht einen automatischen Farbwechsels.",
            "label": "Farbeffekt",
            "category": "ColorLight",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "hue:effect",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die aktuelle Beleuchtungsstärke.",
            "label": "Beleuchtungsstärke",
            "itemType": "Number:Illuminance",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:illuminance",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeit, zu der sich dieser Wert geändert hat.",
            "label": "Letzte Aktualisierung",
            "category": "Time",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:last_updated",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das aktuelle Licht Level.",
            "label": "Licht Level",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:light_level",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht das Ein- und Ausschalten.",
            "label": "Schalter",
            "category": "Light",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der zuletzt gedrückte Taster an dem Tap Schalter.",
            "label": "Tap Schalter",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": [
                    {
                        "value": "34",
                        "label": "Taste 1"
                    },
                    {
                        "value": "16",
                        "label": "Taste 2"
                    },
                    {
                        "value": "17",
                        "label": "Taste 3"
                    },
                    {
                        "value": "18",
                        "label": "Taste 4"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:tap_switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Triggers when a button is pressed on the tap switch.",
            "label": "Tap Switch Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "hue:tap_switch_event",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die aktuelle Temperatur.",
            "label": "Temperatur",
            "category": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:temperature",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.",
                    "label": "Initial brightness",
                    "name": "onBrightness",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "",
            "label": "Color value (Hue,Saturation,Brightness)",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:colorHSB",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.",
                    "label": "Initial brightness",
                    "name": "onBrightness",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "",
            "label": "Color value (Red,Green,Blue)",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:colorRGB",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Open/Close contact",
            "itemType": "Contact",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:contact",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "Current date and/or time",
            "label": "Date/Time value",
            "itemType": "DateTime",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:datetime",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Percentage value",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:dimmer",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "An image to display. Send a binary bmp, jpg, png or any other supported format to this channel.",
            "label": "Image",
            "itemType": "Image",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "mqtt:image",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "GPS coordinates as Latitude,Longitude,Altitude",
            "label": "Location",
            "itemType": "Location",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:location",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Number value",
            "itemType": "Number",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:number",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example \"all/in/#\" or \"sensors/+/config\".",
                    "label": "MQTT Topic",
                    "name": "stateTopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An optional condition on the value of the MQTT topic that must match before this channel is triggered.",
                    "label": "Payload condition",
                    "name": "payload",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The trigger channel payload usually only contains the received MQTT topic value. If you define a separator character, for example '#', the topic and received value will be in the trigger channel payload. For example: my_topic#my_received_value.",
                    "label": "Separator character",
                    "name": "separator",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "This channel is triggered when a value is published to the configured MQTT topic on this broker connection. The event payload will be the received MQTT topic value.",
            "label": "Publish trigger",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "mqtt:publishTrigger",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"OPEN\") that is recognised as UP state. You can use this parameter for a second keyword, next to UP.",
                    "label": "Up value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"CLOSE\") that is recognised as DOWN state. You can use this parameter for a second keyword, next to DOWN.",
                    "label": "Down value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "STOP",
                    "description": "A string (like \"STOP\") that is recognised as stop state. Will set the rollershutter state to undefined, because the current position is unknown at that point.",
                    "label": "Stop value",
                    "name": "stop",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Rollershutter",
            "itemType": "Rollershutter",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:rollershutter",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Text value",
            "itemType": "String",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:string",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "On/Off switch",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt Zeit/Datum an wann das Gerät zuletzt gesehen wurde.",
            "label": "Zuletzt gesehen",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:lastseen",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt an wie lange ein Ping in Millisekunden an das Gerät dauert.",
            "label": "Pingzeit",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:latency",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt an ob das Gerät aktuell online oder offline ist.",
            "label": "Online",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:online",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle atmosphärische relative Luftfeuchtigkeit.",
            "label": "Luftfeuchtigkeit",
            "category": "Humidity",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.0f %%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:atmospheric-humidity",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktueller Luftdruck.",
            "label": "Luftdruck",
            "category": "Pressure",
            "itemType": "Number:Pressure",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.3f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:barometric-pressure",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Batterieladung",
            "category": "Battery",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "step": 1,
                "pattern": "%.0f %%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:battery-level",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Helligkeit und schaltet das Licht ein und aus.",
            "label": "Helligkeit",
            "category": "DimmableLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d %%",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:brightness",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Taste",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:button",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Lichtfarbe.",
            "label": "Farbe",
            "category": "ColorLight",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "system:color",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Farbtemperatur des Lichts.",
            "label": "Farbtemperatur",
            "category": "ColorLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:color-temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ort in geographischen Koordinaten (Breitengrad/Längengrad/Höhe).",
            "label": "Ort",
            "itemType": "Location",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%2$s°N %3$s°E %1$sm",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:location",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Niedriger Batteriestatus",
            "category": "Battery",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:low-battery",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt den Künstler der (aktuell abgespielten) Video- oder Audiodatei an.",
            "label": "Künstler",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:media-artist",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Fernbedienung",
            "category": "MediaControl",
            "itemType": "Player",
            "kind": "STATE",
            "tags": [],
            "UID": "system:media-control",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt den Titel der (aktuell abgespielten) Video- oder Audiodatei an.",
            "label": "Titel",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:media-title",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt eine erkannte Bewegung an.",
            "label": "Bewegung",
            "category": "Motion",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:motion",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Lautstärke auf stumm zu schalten.",
            "label": "Stumm schalten",
            "category": "SoundVolume",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "system:mute",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Außentemperatur.",
            "label": "Außentemperatur",
            "category": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:outdoor-temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Betriebsbereitschaft. Das Gerät ist betriebsbereit, wenn \"Betrieb\" den Status ON hat.",
            "label": "Betrieb",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "system:power",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Einfache Taste",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:rawbutton",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Wipptaster",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:rawrocker",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Signalstärke",
            "category": "QualityOfService",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 4,
                "step": 1,
                "readOnly": true,
                "options": [
                    {
                        "value": "0",
                        "label": "Kein Signal"
                    },
                    {
                        "value": "1",
                        "label": "Schwach"
                    },
                    {
                        "value": "2",
                        "label": "Durchschnittlich"
                    },
                    {
                        "value": "3",
                        "label": "Gut"
                    },
                    {
                        "value": "4",
                        "label": "Ausgezeichnet"
                    }
                ]
            },
            "tags": [],
            "UID": "system:signal-strength",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Auslöser",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:trigger",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Lautstärke.",
            "label": "Lautstärke",
            "category": "SoundVolume",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d %%",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:volume",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Windrichtung ausgedrückt als Winkel.",
            "label": "Windrichtung",
            "category": "Wind",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 360,
                "pattern": "%.0f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:wind-direction",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Windgeschwindigkeit.",
            "label": "Windgeschwindigkeit",
            "category": "Wind",
            "itemType": "Number:Speed",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:wind-speed",
            "advanced": false
        }
    ],
    "config-descriptions": [],
    "discovery": [],
    "extensions": [],
    "manualextensions": [
        {
            "id": "binding-airvisualnode",
            "label": "AirVisual Node Binding",
            "filepath": "binding-airvisualnode-2.4.0.SNAPSHOT.jar",
            "version": "2.4.0.SNAPSHOT",
            "link": "https://www.openhab.org/addons/bindings/airvisualnode/",
            "enabled": true,
            "installed": 1546950221013,
            "type": "binding"
        },
        {
            "id": "binding-avmfritz",
            "label": "AVM FRITZ!Box Binding",
            "filepath": "binding-avmfritz-2.4.0.SNAPSHOT.jar",
            "version": "2.4.0.SNAPSHOT",
            "link": "https://www.openhab.org/addons/bindings/avmfritz/",
            "enabled": true,
            "installed": 1546950225013,
            "type": "binding"
        },
        {
            "id": "webinterface",
            "label": "Paper UI NG Alpha",
            "filepath": "webinterface-paperui-ng-0.1.zip",
            "version": "0.1",
            "link": "https://davidgraeff.github.io/paperui-ng/",
            "enabled": true,
            "installed": 1546950125013,
            "type": "webinterface"
        }
    ],
    "scripts": [
        {
            "filename": "a_script_file.js",
            "name": "My first rule"
        }
    ],
    "script-types": [
        {
            "id": "javascript",
            "extension": "js",
            "label": "Javascript ES6 (Nashorn)",
            "description": ""
        },
        {
            "id": "jython",
            "extension": "py",
            "label": "Jython (Python 2.6 dialect)",
            "description": ""
        }
    ],
    "schedule": [
        {
            "editable": true,
            "label": "My wakeup timer",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 5,
            "remainingRuns": null,
            "cronExpression": "0 7 ? * MON-FRI",
            "type": "cron",
            "enabled": true,
            "UID": "timer:3edb5737",
            "lastrun": 1546950225013
        },
        {
            "editable": true,
            "label": "Garden watering",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 17,
            "remainingRuns": null,
            "cronExpression": "0 30 10-13 ? * WED,FRI",
            "type": "cron",
            "enabled": true,
            "UID": "timer:4263ds53",
            "lastrun": 1546950225013
        },
        {
            "editable": true,
            "label": "An absolut timer",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 0,
            "remainingRuns": 1,
            "datetime": "2008-09-15T15:53:00",
            "type": "fixed",
            "enabled": true,
            "UID": "timer:4263ds54",
            "lastrun": 1546950225013
        }
    ],
    "inbox": [
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Wohnzimmerlichterkette",
            "properties": {
                "lightId": "10",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0d:3d:5b-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:10",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Esszimmerlichterkette",
            "properties": {
                "lightId": "11",
                "modelId": "Plug_01",
                "uniqueId": "7c:b0:3e:aa:00:a7:3b:a6-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:11",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Spüle",
            "properties": {
                "lightId": "41",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0f:39:09-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:41",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Arbeitsfläche",
            "properties": {
                "lightId": "8",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0d:19:74-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:8",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Lichterkette",
            "properties": {
                "lightId": "9",
                "modelId": "Plug_01",
                "uniqueId": "7c:b0:3e:aa:00:a7:52:a2-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:9",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach1",
            "properties": {
                "lightId": "1",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:97:33:c1-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:1",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Fenster",
            "properties": {
                "lightId": "14",
                "modelId": "TRADFRI_bulb_E27_W_opal_1000lm",
                "uniqueId": "00:0b:57:ff:fe:47:94:02-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:14",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach2",
            "properties": {
                "lightId": "2",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:51:eb:d0-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:2",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Klavier 1",
            "properties": {
                "lightId": "21",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:ba:4b:e9-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:21",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Klavier 2",
            "properties": {
                "lightId": "22",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:3f:74-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:22",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Kühlschrank",
            "properties": {
                "lightId": "23",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:3f:7f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:23",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 1",
            "properties": {
                "lightId": "24",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:52:09:e8-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:24",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 2",
            "properties": {
                "lightId": "25",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:a0:e9:e4-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:25",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 3",
            "properties": {
                "lightId": "26",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:ba:53:29-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:26",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 4",
            "properties": {
                "lightId": "27",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:9d:0f:e2-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:27",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 4",
            "properties": {
                "lightId": "28",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:9a:4f:0f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:28",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach3",
            "properties": {
                "lightId": "3",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:44:bd-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:3",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 1",
            "properties": {
                "lightId": "30",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8d:e9:da-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:30",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Obere Etage 2",
            "properties": {
                "lightId": "31",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:97:44:09-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:31",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 2",
            "properties": {
                "lightId": "34",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:62:b7-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:34",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Obere Etage 1",
            "properties": {
                "lightId": "35",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8d:ea:04-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:35",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 3",
            "properties": {
                "lightId": "39",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:51:eb:8a-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:39",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach4",
            "properties": {
                "lightId": "4",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:e7:60-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:4",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Schrank",
            "properties": {
                "lightId": "40",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:84:55:5a-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:40",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach5",
            "properties": {
                "lightId": "5",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:66:56-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:5",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach6",
            "properties": {
                "lightId": "6",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:af:33:b2-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:6",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Kerze",
            "properties": {
                "lightId": "13",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "90:fd:9f:ff:fe:05:4b:93-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:13",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Ecke",
            "properties": {
                "lightId": "15",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "90:fd:9f:ff:fe:0e:70:52-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:15",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Löwe",
            "properties": {
                "lightId": "16",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "00:0b:57:ff:fe:bf:49:db-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:16",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Laterne",
            "properties": {
                "lightId": "17",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "00:0b:57:ff:fe:ee:c1:5f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:17",
            "thingTypeUID": "hue:0220"
        }
    ],
    "items": [
        {
            "link": "https://192.168.1.8/rest/items/90b1a309a9ba092",
            "state": "NULL",
            "editable": true,
            "type": "Number",
            "name": "90b1a309a9ba092",
            "label": "cc",
            "category": "attic",
            "tags": [
                "ColorLighting",
                "Switchable"
            ],
            "groupNames": [
                "testgroup"
            ]
        },
        {
            "link": "https://192.168.1.8/rest/items/934bbb7398539b",
            "state": "Hallo",
            "editable": true,
            "type": "String",
            "name": "934bbb7398539b",
            "label": "tt2",
            "tags": [],
            "groupNames": []
        },
        {
            "link": "https://192.168.1.8/rest/items/GenericMQTTThing_ADemoTextChannel",
            "state": "NULL",
            "stateDescription": {
                "pattern": "%s ",
                "readOnly": false,
                "options": []
            },
            "editable": true,
            "type": "String",
            "name": "GenericMQTTThing_ADemoTextChannel",
            "label": "A demo text channel",
            "category": "Lighting",
            "tags": [],
            "groupNames": []
        },
        {
            "link": "https://192.168.1.8/rest/items/a76a41860925827",
            "state": "TEST2",
            "editable": true,
            "type": "String",
            "name": "a76a41860925827",
            "label": "tt",
            "tags": [],
            "groupNames": []
        },
        {
            "link": "https://192.168.1.8/rest/items/a919923a6733771",
            "state": "CLOSED",
            "editable": true,
            "type": "String",
            "name": "a919923a6733771",
            "label": "gg",
            "tags": [],
            "groupNames": []
        }
    ],
    "links": [],
    "module-types": [
        {
            "outputs": [
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "tags": [],
                    "label": "Event",
                    "description": "the event of the channel trigger",
                    "reference": "channelEventTriggerId.event"
                }
            ],
            "uid": "core.ChannelEventTrigger",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "a trigger channel fires",
            "description": "React on events from a trigger channel of a thing.",
            "configDescriptions": [
                {
                    "context": "channel",
                    "description": "the id of the channel which should be observed for triggers",
                    "label": "Channel",
                    "name": "channelUID",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": [
                        {
                            "value": "TRIGGER",
                            "name": "kind"
                        }
                    ]
                },
                {
                    "description": "the event on the channel to react on",
                    "label": "Event",
                    "name": "event",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "inputs": [
                {
                    "name": "input",
                    "type": "java.lang.Object",
                    "label": "input which will be compared",
                    "description": "The input which will be compared.",
                    "required": true,
                    "tags": []
                }
            ],
            "uid": "core.GenericCompareCondition",
            "visibility": "HIDDEN",
            "tags": [],
            "label": "CompareCondition",
            "description": "configurable compare condition",
            "configDescriptions": [
                {
                    "description": "property of the input type to be compared",
                    "label": "Input property",
                    "name": "inputproperty",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the value to be compared with the input",
                    "label": "compare with",
                    "name": "right",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the compare operator, allowed are <,>,=,!=,>=,<= matches",
                    "name": "operator",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "inputs": [
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "label": "Event",
                    "description": "The events which was sent.",
                    "required": true,
                    "tags": []
                }
            ],
            "uid": "core.GenericEventCondition",
            "visibility": "HIDDEN",
            "tags": [],
            "label": "Event Condition",
            "description": "Condition for events",
            "configDescriptions": [
                {
                    "description": "topic should match",
                    "name": "topic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "eventType should match",
                    "name": "eventType",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "source should match",
                    "name": "source",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "payload should match",
                    "name": "payload",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "outputs": [
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "tags": [],
                    "label": "Event",
                    "description": "The events which was sent.",
                    "reference": "event"
                }
            ],
            "uid": "core.GenericEventTrigger",
            "visibility": "HIDDEN",
            "tags": [],
            "label": "Basic Event Trigger",
            "description": "Triggers Rules on Events",
            "configDescriptions": [
                {
                    "description": "This is the topic, the trigger will listen to: >>smarthome/*<<",
                    "label": "Topic",
                    "name": "eventTopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This is the source of the event (eg. item name)",
                    "label": "Source",
                    "name": "eventSource",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the event type, the trigger should listen to. Multiple types can be specified comma-separated",
                    "label": "Event Type",
                    "name": "eventTypes",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "inputs": [
                {
                    "name": "command",
                    "type": "org.eclipse.smarthome.core.types.Command",
                    "label": "Command",
                    "description": "command that will be sent to the item.",
                    "required": false,
                    "tags": []
                }
            ],
            "outputs": [],
            "uid": "core.ItemCommandAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "send a command",
            "description": "Sends a command to a specified item.",
            "configDescriptions": [
                {
                    "context": "item",
                    "description": "the name of the item",
                    "label": "Item",
                    "name": "itemName",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the default command to be sent if none is passed as an input value",
                    "label": "Command",
                    "name": "command",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "outputs": [
                {
                    "name": "command",
                    "type": "command",
                    "tags": [],
                    "label": "Command",
                    "description": "the received command"
                },
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "tags": [],
                    "label": "Event",
                    "description": "The events which was sent.",
                    "reference": "event"
                }
            ],
            "uid": "core.ItemCommandTrigger",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "an item receives a command",
            "description": "This triggers the rule if an item receives a command.",
            "configDescriptions": [
                {
                    "context": "item",
                    "description": "the name of the item",
                    "label": "Item",
                    "name": "itemName",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the received command",
                    "label": "Command",
                    "name": "command",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "outputs": [
                {
                    "name": "newState",
                    "type": "state",
                    "tags": [],
                    "label": "New State",
                    "description": "the new item state"
                },
                {
                    "name": "oldState",
                    "type": "state",
                    "tags": [],
                    "label": "Old State",
                    "description": "the old item state"
                },
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "tags": [],
                    "label": "Event",
                    "description": "The events which was sent.",
                    "reference": "event"
                }
            ],
            "uid": "core.ItemStateChangeTrigger",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "an item state changes",
            "description": "This triggers the rule if an item state has changed.",
            "configDescriptions": [
                {
                    "context": "item",
                    "description": "the name of the item",
                    "label": "Item",
                    "name": "itemName",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the required previous state of the item",
                    "label": "Previous State",
                    "name": "previousState",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "description": "the state of the item",
                    "label": "State",
                    "name": "state",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "inputs": [],
            "uid": "core.ItemStateCondition",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "an item has a given state",
            "description": "Compares the item state with the given value",
            "configDescriptions": [
                {
                    "context": "item",
                    "description": "the name of the item",
                    "label": "Item",
                    "name": "itemName",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the compare operator (one of =,<,>,!=,>=,<=)",
                    "label": "Operator",
                    "name": "operator",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "=",
                            "value": "="
                        },
                        {
                            "label": "!=",
                            "value": "!="
                        },
                        {
                            "label": ">",
                            "value": ">"
                        },
                        {
                            "label": ">=",
                            "value": ">="
                        },
                        {
                            "label": "<",
                            "value": "<"
                        },
                        {
                            "label": "<=",
                            "value": "<="
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "description": "the state to be compared with",
                    "label": "State",
                    "name": "state",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "outputs": [
                {
                    "name": "state",
                    "type": "state",
                    "tags": [],
                    "label": "State",
                    "description": "the item state"
                },
                {
                    "name": "event",
                    "type": "org.eclipse.smarthome.core.events.Event",
                    "tags": [],
                    "label": "Event",
                    "description": "The events which was sent.",
                    "reference": "event"
                }
            ],
            "uid": "core.ItemStateUpdateTrigger",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "an item state is updated",
            "description": "This triggers the rule if an item state is updated (even if it does not change).",
            "configDescriptions": [
                {
                    "context": "item",
                    "description": "the name of the item",
                    "label": "Item",
                    "name": "itemName",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the state of the item",
                    "label": "State",
                    "name": "state",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": false,
                    "options": [
                        {
                            "label": "ON",
                            "value": "ON"
                        },
                        {
                            "label": "OFF",
                            "value": "OFF"
                        },
                        {
                            "label": "OPEN",
                            "value": "OPEN"
                        },
                        {
                            "label": "CLOSED",
                            "value": "CLOSED"
                        },
                        {
                            "label": "UP",
                            "value": "UP"
                        },
                        {
                            "label": "DOWN",
                            "value": "DOWN"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "inputs": [],
            "outputs": [],
            "uid": "core.RuleEnablementAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "enables or disable rules",
            "description": "Enables or disables a rule or a group of rules specified by their UIDs.",
            "configDescriptions": [
                {
                    "description": "'true' enables all specified rules, 'false' disables them.",
                    "label": "Enable rules",
                    "name": "enable",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Enable",
                            "value": "true"
                        },
                        {
                            "label": "Disable",
                            "value": "false"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "context": "rule",
                    "description": "Specifies the rules that should be enabled or disabled.",
                    "label": "Rules",
                    "name": "ruleUIDs",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": true,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "outputs": [],
            "uid": "core.RunRuleAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "run rules",
            "description": "runs/executes a rule or a group of rules specified by their UIDs.",
            "configDescriptions": [
                {
                    "context": "rule",
                    "description": "Specifies the target rule(s) that should be executed.",
                    "label": "Rules",
                    "name": "ruleUIDs",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": true,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Specifies whether the conditions of the target rule(s) to be executed should be considered or not.",
                    "label": "Consider Conditions",
                    "name": "considerConditions",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Yes",
                            "value": "true"
                        },
                        {
                            "label": "No",
                            "value": "false"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "uid": "core.TimeOfDayCondition",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "it is a certain time of day",
            "description": "Evaluates if the current time is within a user-configured time span.",
            "configDescriptions": [
                {
                    "context": "time",
                    "description": "Start of the time span (in hh:mm)",
                    "label": "Start Time",
                    "name": "startTime",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "time",
                    "description": "End of the time span (in hh:mm)",
                    "label": "End Time",
                    "name": "endTime",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "inputs": [],
            "outputs": [
                {
                    "name": "result",
                    "type": "java.lang.Object",
                    "tags": [],
                    "label": "result",
                    "description": "the script result.",
                    "reference": ""
                }
            ],
            "uid": "jsr223.ScriptedAction",
            "visibility": "EXPERT",
            "tags": [],
            "label": "Scripted action",
            "description": "allows the execution of a method defined by a script",
            "configDescriptions": [
                {
                    "description": "the identifier of the private method",
                    "name": "privId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "uid": "jsr223.ScriptedCondition",
            "visibility": "EXPERT",
            "tags": [],
            "label": "Scripted condition",
            "description": "allows the definition of a condition by a script",
            "configDescriptions": [
                {
                    "description": "the identifier of the private method",
                    "name": "privId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "outputs": [
                {
                    "name": "triggerOutput",
                    "type": "java.lang.String",
                    "tags": [],
                    "label": "TriggerOutput label",
                    "description": "Text from the trigger",
                    "reference": "consoleInput",
                    "defaultValue": "dtag"
                }
            ],
            "uid": "jsr223.ScriptedTrigger",
            "visibility": "EXPERT",
            "tags": [],
            "label": "Scripted trigger",
            "description": "allows the execution of a method defined by a script",
            "configDescriptions": [],
            "type": "trigger"
        },
        {
            "inputs": [],
            "outputs": [],
            "uid": "media.PlayAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "play a sound",
            "description": "Plays a sound file.",
            "configDescriptions": [
                {
                    "description": "the sound to play",
                    "label": "Sound",
                    "name": "sound",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Doorbell",
                            "value": "doorbell.mp3"
                        },
                        {
                            "label": "Barking",
                            "value": "barking.mp3"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "description": "the audio sink id",
                    "label": "Sink",
                    "name": "sink",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "System Speaker (with mp3 support)",
                            "value": "enhancedjavasound"
                        },
                        {
                            "label": "Web Audio",
                            "value": "webaudio"
                        },
                        {
                            "label": "System Speaker",
                            "value": "javasound"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "outputs": [],
            "uid": "media.SayAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "say something",
            "description": "Speaks a given text through a natural voice.",
            "configDescriptions": [
                {
                    "description": "the text to speak",
                    "label": "Text",
                    "name": "text",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "the audio sink id",
                    "label": "Sink",
                    "name": "sink",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "System Speaker (with mp3 support)",
                            "value": "enhancedjavasound"
                        },
                        {
                            "label": "Web Audio",
                            "value": "webaudio"
                        },
                        {
                            "label": "System Speaker",
                            "value": "javasound"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "outputs": [
                {
                    "name": "result",
                    "type": "java.lang.Object",
                    "tags": [],
                    "label": "result",
                    "description": "the script result"
                }
            ],
            "uid": "script.ScriptAction",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "execute a given script",
            "description": "Allows the execution of a user-defined script.",
            "configDescriptions": [
                {
                    "defaultValue": "application/javascript",
                    "description": "the scripting language used",
                    "name": "type",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Javascript",
                            "value": "application/javascript"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "context": "script",
                    "description": "the script to execute",
                    "name": "script",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "action"
        },
        {
            "inputs": [],
            "uid": "script.ScriptCondition",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "a given script evaluates to true",
            "description": "Allows the definition of a condition through a script.",
            "configDescriptions": [
                {
                    "description": "the scripting language used",
                    "name": "type",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Javascript",
                            "value": "application/javascript"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "context": "script",
                    "description": "the script to execute",
                    "name": "script",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "inputs": [],
            "uid": "timer.DayOfWeekCondition",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "it is a certain day of the week",
            "description": "checks for the current day of the week",
            "configDescriptions": [
                {
                    "context": "dayOfWeek",
                    "description": "the days of the week when the rule should be active",
                    "label": "Days of the week",
                    "name": "days",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": true,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "condition"
        },
        {
            "outputs": [],
            "uid": "timer.GenericCronTrigger",
            "visibility": "HIDDEN",
            "tags": [],
            "label": "Cron Trigger",
            "description": "This triggers a rule based on a cron expression",
            "configDescriptions": [
                {
                    "description": "the cron expression",
                    "label": "cron expression",
                    "name": "cronExpression",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        },
        {
            "outputs": [],
            "uid": "timer.TimeOfDayTrigger",
            "visibility": "VISIBLE",
            "tags": [],
            "label": "it is a fixed time of day",
            "description": "Triggers at a specified time",
            "configDescriptions": [
                {
                    "context": "time",
                    "description": "the time (in hh:mm)",
                    "label": "Time",
                    "name": "time",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "type": "trigger"
        }
    ],
    "persistence": [
        {
            "uid": "30179c6a-2a3c-4435-a7ff-c7448e6df17d",
            "annotation": "Allows an overview of when my items updated to a new value",
            "label": "InfluxDB History",
            "serviceid": "influxdb",
            "items": [],
            "stategy": {
                "label": "every update"
            }
        },
        {
            "uid": "66e7b0d9-3de6-479a-9873-a5347878923d",
            "annotation": "Restores all my items on startup",
            "label": "MapDB Restore",
            "serviceid": "mapdb",
            "items": [],
            "stategy": {
                "label": "restore on startup"
            }
        },
        {
            "uid": "790073db-6a9a-46f8-8ff2-876c37d7afb7",
            "annotation": "Does this and that",
            "label": "rrd4j Charting",
            "serviceid": "rrd4j",
            "items": [],
            "stategy": {
                "label": "cron strategy"
            }
        },
        {
            "uid": "8c7e5ce1-578c-4ac4-bc9e-fd20ab6be70e",
            "annotation": "Stores all items to mapDB for a later restart",
            "label": "MapDB Restore",
            "serviceid": "mapdb",
            "items": [],
            "stategy": {
                "label": "every change"
            }
        },
        {
            "uid": "e7773915-cd05-4376-813f-b35de6a98bf2",
            "annotation": "Used for charting",
            "label": "InfluxDB Charting",
            "serviceid": "influxdb",
            "items": [],
            "stategy": {
                "label": "every change"
            }
        }
    ],
    "persistence-services": [
        {
            "id": "dynamodb",
            "description": "This service allows you to persist state updates using the Amazon DynamoDB database. ",
            "label": "Amazon DynamoDB Persistence",
            "configDescriptionURI": "persistence:dynamodb"
        },
        {
            "id": "influxdb",
            "description": "This service allows you to persist and query states using the InfluxDB time series database.",
            "label": "InfluxDB",
            "configDescriptionURI": "persistence:influxdb"
        },
        {
            "id": "jpa",
            "description": "This service allows you to persist state updates using a SQL or NoSQL database through the Java Persistence API",
            "label": "Java Persistence API",
            "configDescriptionURI": "persistence:jpa"
        },
        {
            "id": "mapdb",
            "description": "The mapdb Persistence Service is based on simple key-value store that only saves the last value. The intention is to use this for restoreOnStartup items because all other persistence options have their drawbacks if values are only needed for reload.",
            "label": "mapdb",
            "configDescriptionURI": "persistence:mapdb"
        },
        {
            "id": "rrd4j",
            "description": "rrd4j is a round-robin database and does not grow in size - it has a fixed allocated size, which is used. This is accomplished by doing data compression, which means that the older the data is, the less values are available. So while you might have a value every minute for the last 24 hours, you might only have one every day for the last year.",
            "label": "rrd4j",
            "configDescriptionURI": "persistence:rrd4j"
        }
    ],
    "profile-types": [],
    "rules": [
        {
            "status": {
                "status": "IDLE",
                "statusDetail": "NONE"
            },
            "triggers": [
                {
                    "id": "1",
                    "label": "it is a fixed time of day",
                    "description": "Triggers at a specified time",
                    "configuration": {
                        "time": "12:12"
                    },
                    "type": "timer.TimeOfDayTrigger"
                }
            ],
            "conditions": [],
            "actions": [
                {
                    "inputs": {},
                    "id": "2",
                    "label": "execute a given script",
                    "description": "Allows the execution of a user-defined script.",
                    "configuration": {
                        "type": "application/javascript",
                        "script": "var myLog = Java.type(\"org.slf4j.LoggerFactory\").getLogger(\"org.eclipse.smarthome.model.script.Rules\");\nmyLog.info(\"Hello world!\")"
                    },
                    "type": "script.ScriptAction"
                }
            ],
            "configuration": {},
            "configDescriptions": [],
            "uid": "51957c76-6b40-4451-b3e6-dab3b915ca63",
            "name": "testrule",
            "tags": [],
            "visibility": "VISIBLE",
            "description": "testdesc"
        }
    ],
    "services": [],
    "service-config": [],
    "templates": [],
    "thing-types": [
        {
            "UID": "astro:moon",
            "label": "Astronomische Monddaten",
            "description": "Stellt astronomische Monddaten zur Verfügung",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "astro:sun",
            "label": "Astronomische Sonnendaten",
            "description": "Stellt astronomische Sonnendaten zur Verfügung",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "deconz:consumptionsensor",
            "label": "Consumption Sensor",
            "description": "A consumption sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:daylightsensor",
            "label": "Daylight Sensor",
            "description": "A daylight sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:deconz",
            "label": "Deconz",
            "description": "A running deCONZ software instance",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "deconz:humiditysensor",
            "label": "Humidity Sensor",
            "description": "A humidity sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:lightsensor",
            "label": "Light Sensor",
            "description": "A light sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:openclosesensor",
            "label": "Open/Close Sensor",
            "description": "A open/close sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:powersensor",
            "label": "Power Sensor",
            "description": "A power sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:presencesensor",
            "label": "Presence Sensor",
            "description": "A Presence sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:pressuresensor",
            "label": "Pressure Sensor",
            "description": "A pressure senor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:switch",
            "label": "Switch/Button",
            "description": "A switch or button",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:temperaturesensor",
            "label": "Temperature Sensor",
            "description": "A temperature sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:waterleakagesensor",
            "label": "Water Leakage Sensor",
            "description": "A water leakage sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0000",
            "label": "Lampe (weiß)",
            "description": "Lampe zum Ein- und Ausschalten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0010",
            "label": "Schaltbare Steckdose",
            "description": "Steckdose zum Ein- und Ausschalten von herkömmlichen Lampen oder anderen elektronischen Geräten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0100",
            "label": "Dimmbare Lampe (weiß)",
            "description": "Dimmbare Lampe mit fester Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0106",
            "label": "Lichtstärkesensor",
            "description": "Lichtstärkesensor mit einstellbaren Schwellwerten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0107",
            "label": "Bewegungsmelder",
            "description": "Bewegungsmelder mit einstellbarer Sensitivität.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0110",
            "label": "Dimmbare Steckdose",
            "description": "Steckdose zum Dimmen von herkömmlichen Lampen.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0200",
            "label": "Farbige Lampe",
            "description": "Dimmbare Lampe mit einstellbarer Farbe.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0210",
            "label": "Farbige Lampe",
            "description": "Dimmbare Lampe mit einstellbarer Farbe und Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0220",
            "label": "Farbtemperatur Lampe (weiß)",
            "description": "Dimmbare Lampe mit einstellbarer Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0302",
            "label": "Temperatursensor",
            "description": "Temperatursensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0820",
            "label": "Dimmschalter",
            "description": "Fernbedienung mit Dimmfunktion.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0830",
            "label": "Tap Schalter",
            "description": "Fernbedienung mit konfigurierbaren Tasten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:bridge",
            "label": "Hue Bridge",
            "description": "Philips Hue Bridge.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:broker",
            "label": "MQTT Broker",
            "description": "A connection to a MQTT broker",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:homeassistant",
            "label": "HomeAssistant MQTT Component",
            "description": "You need a configured Broker first. This Thing represents a device, that follows the \"HomeAssistant MQTT Component\" specification.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "mqtt:homie300",
            "label": "Homie MQTT device",
            "description": "You need a configured Broker first. This thing represents a device, that follows the \"MQTT Homie Convention\" (Version 3.x).",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "mqtt:systemBroker",
            "label": "System MQTT Broker",
            "description": "A system configured and therefore read-only broker connection. Properties are reflecting the configuration and internal connection status.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:topic",
            "label": "Generic MQTT Thing",
            "description": "You need a configured Broker first. Dynamically add channels of various types to this Thing. Link different MQTT topics to each channel.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "network:pingdevice",
            "label": "Pingable Netzwerkgerät",
            "description": "Die Verfügbarkeit des Geräts wird mit ICMP Ping, ARP Ping und DHCP Paketen festgestellt.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "network:servicedevice",
            "label": "Netzwerkgerät mit Dienst",
            "description": "Die Verfügbarkeit des Geräts wird durch einen Verbindungsversuch mit dem angegeben TCP Dienst festgestellt.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        }
    ],
    "things": [
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "Deconz",
            "configuration": {
                "apikey": "FB21485BC2",
                "host": "192.168.1.8:8081"
            },
            "properties": {
                "ipaddress": "192.168.1.8",
                "fwversion": "0x261f0500",
                "zigbeechannel": "15",
                "apiversion": "1.0.9",
                "swversion": "2.5.25",
                "uuid": "d14660d5-d84b-4a91-8f8e-56cb4a3b04e2"
            },
            "UID": "deconz:deconz:ba6f9e51",
            "thingTypeUID": "deconz:deconz",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "UNINITIALIZED",
                "statusDetail": "DISABLED"
            },
            "editable": true,
            "label": "Philips hue (192.168.1.8) compatible Wireless Light Control Gateway",
            "configuration": {
                "ipAddress": "192.168.1.8:8081",
                "pollingInterval": 10,
                "sensorPollingInterval": 5000000
            },
            "properties": {
                "serialNumber": "b827ebfbe782",
                "firmwareVersion": "2.5.25",
                "vendor": "Philips"
            },
            "UID": "hue:bridge:00212EFFFF022B51",
            "thingTypeUID": "hue:bridge",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "MQTT Broker",
            "configuration": {
                "publickeypin": true,
                "lastwill_qos": 0,
                "clientid": "paho9999801975208383",
                "retain": true,
                "secure": false,
                "certificatepin": true,
                "keep_alive_time": 60000,
                "password": "elch1fahne",
                "qos": 0,
                "host": "localhost",
                "reconnect_time": 60000
            },
            "properties": {},
            "UID": "mqtt:broker:f0fbc884",
            "thingTypeUID": "mqtt:broker",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "Generic MQTT Thing",
            "bridgeUID": "mqtt:broker:f0fbc884",
            "configuration": {},
            "properties": {},
            "UID": "mqtt:topic:605a1c38",
            "thingTypeUID": "mqtt:topic",
            "channels": [
                {
                    "linkedItems": [
                        "GenericMQTTThing_ADemoTextChannel"
                    ],
                    "uid": "mqtt:topic:605a1c38:demochannel",
                    "id": "demochannel",
                    "channelTypeUID": "mqtt:string",
                    "itemType": "String",
                    "kind": "STATE",
                    "label": "A demo text channel",
                    "defaultTags": [],
                    "properties": {},
                    "configuration": {
                        "commandTopic": "demo/cmd",
                        "stateTopic": "demo/state"
                    }
                }
            ]
        }
    ],
    "voice-interpreters": []
}