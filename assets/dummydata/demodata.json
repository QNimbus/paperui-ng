{
    "bindings": [
        {
            "author": "Gerhard Riegler",
            "description": "Das Astro Binding berechnet astronomische Daten von Sonne und Mond.",
            "id": "astro",
            "name": "Astro Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.astro"
        },
        {
            "author": "David Graeff",
            "description": "Unterstützt die Raspbee und Conbee Zigbee Dongles via Deconz",
            "id": "deconz",
            "name": "Dresden Elektronik Deconz",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.deconz"
        },
        {
            "author": "Deutsche Telekom AG",
            "description": "Dieses Binding integriert das Philips Hue System. Durch diese können die Hue Lampen und Leuchten gesteuert werden. ",
            "id": "hue",
            "name": "Hue Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.hue"
        },
        {
            "author": "David Graeff",
            "description": "Erlaubt die Verwaltung von MQTT Verbindungen und das Verknüpfen von MQTT Topics",
            "id": "mqtt",
            "name": "MQTT Binding",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.mqtt",
            "custompages": [
                {
                    "uri": "dummydata/mqtt.html",
                    "label": "MQTT Traffic monitor"
                }
            ]
        },
        {
            "author": "Marc Mettke, David Graeff",
            "description": "Das Network Binding überprüft, ob sich ein Gerät aktuell im Netzwerk befindet oder nicht.",
            "id": "network",
            "name": "Network Binding",
            "configDescriptionURI": "binding:network",
            "loglevel": "warn",
            "source": "https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.network"
        }
    ],
    "binding-config": [],
    "channel-types": [
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes in Tagen",
            "label": "Mondalter",
            "itemType": "Number:Time",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:age",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes",
            "label": "Mondalter",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:ageDegree",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Alter des Mondes",
            "label": "Mondalter",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:agePercent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Herbstanfang",
            "label": "Herbst",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:autumn",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Azimut des Himmelskörpers",
            "label": "Azimut",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:azimuth",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Höhe der Strahlung, nach Beugung durch Wolken und Atmosphäre",
            "label": "Diffuse Strahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:diffuseRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Höhe der Strahlung nach Eindringen in die atmosphärische Schicht",
            "label": "Direkte Strahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:directRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Entfernung des Objekts",
            "label": "Entfernung",
            "itemType": "Number:Length",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:distance",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt wenn der Abstand erreicht ist",
            "label": "Datum",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:distanceDate",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon distance event",
            "label": "Moon Distance Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:distanceEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Dauer des Ereignisses",
            "label": "Dauer",
            "itemType": "Number:Time",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:duration",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Höhenwinkel des Himmelskörpers",
            "label": "Höhenwinkel",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:elevation",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Die Endzeit des Ereignisses",
            "label": "Endzeit",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:end",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten erstes Viertels",
            "label": "Erstes Viertel",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:firstQuarter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten Vollmondes",
            "label": "Vollmond",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:fullMoon",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die Beleuchtungsstärke des Mondes",
            "label": "Beleuchtungsstärke des Mondes",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.0f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:illumination",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon eclipse event",
            "label": "Moon Eclipse Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:moonEclipseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten Neumondes",
            "label": "Neumond",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:newMoon",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten partiellen Sonnenfinsternis",
            "label": "Partielle Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:partial",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Moon phase event",
            "label": "Moon Phase Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:phaseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Mondphase",
            "label": "Mondphase",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "NEW",
                        "label": "Neumond"
                    },
                    {
                        "value": "WAXING_CRESCENT",
                        "label": "Zunehmende Sichel"
                    },
                    {
                        "value": "FIRST_QUARTER",
                        "label": "Erstes Viertel"
                    },
                    {
                        "value": "WAXING_GIBBOUS",
                        "label": "Zunehmender Halbmond"
                    },
                    {
                        "value": "FULL",
                        "label": "Vollmond"
                    },
                    {
                        "value": "WANING_GIBBOUS",
                        "label": "Abnehmender Halbmond"
                    },
                    {
                        "value": "THIRD_QUARTER",
                        "label": "Drittes Viertel"
                    },
                    {
                        "value": "WANING_CRESCENT",
                        "label": "Abnehmende Sichel"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:phaseName",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Range event",
            "label": "Range Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:rangeEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten ringförmigen Sonnenfinsternis",
            "label": "Ringförmige Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:ring",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Jahreszeit",
            "label": "Jahreszeit",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "SPRING",
                        "label": "Frühling"
                    },
                    {
                        "value": "SUMMER",
                        "label": "Sommer"
                    },
                    {
                        "value": "AUTUMN",
                        "label": "Herbst"
                    },
                    {
                        "value": "WINTER",
                        "label": "Winter"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:seasonName",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Projiziertes Schattenlängenverhältnis (Abgeleitet vom Höhenwinkel)",
            "label": "Schattenlängenverhältnis",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:shadeLength",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das Sternzeichen",
            "label": "Sternzeichen",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "ARIES",
                        "label": "Widder"
                    },
                    {
                        "value": "TAURUS",
                        "label": "Stier"
                    },
                    {
                        "value": "GEMINI",
                        "label": "Zwilling"
                    },
                    {
                        "value": "CANCER",
                        "label": "Krebs"
                    },
                    {
                        "value": "LEO",
                        "label": "Löwe"
                    },
                    {
                        "value": "VIRGO",
                        "label": "Jungfrau"
                    },
                    {
                        "value": "LIBRA",
                        "label": "Waage"
                    },
                    {
                        "value": "SCORPIO",
                        "label": "Skorpion"
                    },
                    {
                        "value": "SAGITTARIUS",
                        "label": "Schütze"
                    },
                    {
                        "value": "CAPRICORN",
                        "label": "Steinbock"
                    },
                    {
                        "value": "AQUARIUS",
                        "label": "Wassermann"
                    },
                    {
                        "value": "PISCES",
                        "label": "Fische"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:sign",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Frühlingsanfang",
            "label": "Frühling",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:spring",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Die Startzeit des Ereignisses",
            "label": "Startzeit",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:start",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Sommeranfang",
            "label": "Sommer",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:summer",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "Sun eclipse event",
            "label": "Sun Eclipse Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "astro:sunEclipseEvent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Name der aktuellen Sonnenphase",
            "label": "Sonnenphase",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "SUN_RISE",
                        "label": "Sonnenaufgang"
                    },
                    {
                        "value": "ASTRO_DAWN",
                        "label": "Astronomische Morgendämmerung"
                    },
                    {
                        "value": "NAUTIC_DAWN",
                        "label": "Nautische Dämmerung"
                    },
                    {
                        "value": "CIVIL_DAWN",
                        "label": "Bürgerliche Morgendämmerung"
                    },
                    {
                        "value": "CIVIL_DUSK",
                        "label": "Bürgerliche Abenddämmerung"
                    },
                    {
                        "value": "NAUTIC_DUSK",
                        "label": "Nautische Abenddämmerung"
                    },
                    {
                        "value": "ASTRO_DUSK",
                        "label": "Astronomische Abenddämmerung"
                    },
                    {
                        "value": "SUN_SET",
                        "label": "Sonnenuntergang"
                    },
                    {
                        "value": "DAYLIGHT",
                        "label": "Tageslicht"
                    },
                    {
                        "value": "NOON",
                        "label": "Mittag"
                    },
                    {
                        "value": "NIGHT",
                        "label": "Nacht"
                    }
                ]
            },
            "tags": [],
            "UID": "astro:sunPhaseName",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt des nächsten dritten Viertels",
            "label": "Drittes Viertel",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:thirdQuarter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeitpunkt der nächsten totalen Sonnenfinsternis",
            "label": "Totale Sonnenfinsternis",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:total",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gesamtmenge der Strahlung auf dem Boden",
            "label": "Gesamtstrahlung",
            "itemType": "Number:Intensity",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:totalRadiation",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Winteranfang",
            "label": "Winter",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tF %1$tR",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "astro:winter",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "The Button that was last pressed on the switch.",
            "label": "Button",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:button",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "This channel is triggered on a button event. The trigger payload consists of the button event number.",
            "label": "Button Trigger",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "deconz:buttonevent",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current consumption",
            "label": "Consumption",
            "itemType": "Number:Energy",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:consumption",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current current",
            "label": "Current",
            "category": "Energy",
            "itemType": "Number:ElectricCurrent",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:current",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Light level is below the darkness threshold.",
            "label": "Dark",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:dark",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Light level is above the daylight threshold.",
            "label": "Daylight",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:daylight",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current humidity",
            "label": "Humidity",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:humidity",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "The date and time when the sensor was last updated.",
            "label": "Last Updated",
            "category": "Time",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:last_updated",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "A light level",
            "label": "Lightlevel",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": [
                    {
                        "value": "daylight",
                        "label": "Daylight"
                    },
                    {
                        "value": "sunset",
                        "label": "Sunset"
                    },
                    {
                        "value": "dark",
                        "label": "Dark"
                    }
                ]
            },
            "tags": [],
            "UID": "deconz:light",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current light level.",
            "label": "Light Level",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:light_level",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current light illuminance",
            "label": "Illuminance",
            "itemType": "Number:Illuminance",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:lightlux",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Open/Close detected",
            "label": "Open/Close",
            "itemType": "Contact",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:open",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current power usage",
            "label": "Power",
            "category": "Energy",
            "itemType": "Number:Power",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:power",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Presence detected",
            "label": "Presence",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:presence",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current pressure",
            "label": "Pressure",
            "itemType": "Number:Pressure",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:pressure",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current temperature",
            "label": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.2f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Dawn is around 130, sunrise at 140, sunset at 190, and dusk at 210",
            "label": "Daylight Value",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:value",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Current voltage",
            "label": "Voltage",
            "category": "Energy",
            "itemType": "Number:ElectricPotential",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:voltage",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Water leakage detected",
            "label": "Water Leakage",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "deconz:waterleakage",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht ein temporäres Blinken.",
            "label": "Alarm",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": false,
                "options": [
                    {
                        "value": "NONE",
                        "label": "Kein Blinken"
                    },
                    {
                        "value": "SELECT",
                        "label": "Einmaliges Blinken"
                    },
                    {
                        "value": "LSELECT",
                        "label": "Mehrfaches Blinken"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:alert",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Helligkeit. Ermöglicht ebenfalls die Lampe ein- und auszuschalten.",
            "label": "Helligkeit",
            "category": "DimmableLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:brightness",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Farbe. Ermöglicht ebenfalls die Lampe zu dimmen oder ein- und auszuschalten.",
            "label": "Farbe",
            "category": "ColorLight",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:color",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Farbtemperatur. Von Tageslichtweiß (0) bis Warmweiß (100).",
            "label": "Farbtemperatur",
            "category": "ColorLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [],
            "UID": "hue:color_temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Licht Level ist unter dem Dunkel-Schwellwert.",
            "label": "Dunkel",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:dark",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der Licht Level ist über dem Hell-Schwellwert.",
            "label": "Hell",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:daylight",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der zuletzt gedrückte Taster an dem Dimmer-Schalter.",
            "label": "Dimmer-Schalter",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": [
                    {
                        "value": "1000",
                        "label": "An (Initial)"
                    },
                    {
                        "value": "1001",
                        "label": "An (Gehalten)"
                    },
                    {
                        "value": "1002",
                        "label": "An (Kurz Gedrückt)"
                    },
                    {
                        "value": "1003",
                        "label": "An (Lang Gedrückt)"
                    },
                    {
                        "value": "2000",
                        "label": "Heller (Initial)"
                    },
                    {
                        "value": "2001",
                        "label": "Heller (Gehalten)"
                    },
                    {
                        "value": "2002",
                        "label": "Heller (Kurz Gedrückt)"
                    },
                    {
                        "value": "2003",
                        "label": "Heller (Lang Gedrückt)"
                    },
                    {
                        "value": "3000",
                        "label": "Dunkler (Initial) "
                    },
                    {
                        "value": "3001",
                        "label": "Dunkler (Gehalten)"
                    },
                    {
                        "value": "3002",
                        "label": "Dunkler (Kurz Gedrückt)"
                    },
                    {
                        "value": "3003",
                        "label": "Dunkler (Lang Gedrückt)"
                    },
                    {
                        "value": "4000",
                        "label": "Aus (Initial)"
                    },
                    {
                        "value": "4001",
                        "label": "Aus (Gehalten)"
                    },
                    {
                        "value": "4002",
                        "label": "Aus (Kurz Gedrückt)"
                    },
                    {
                        "value": "4003",
                        "label": "Aus (Lang Gedrückt)"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:dimmer_switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Triggers when a button is pressed on the dimmer switch.",
            "label": "Dimmer Switch Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "hue:dimmer_switch_event",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht einen automatischen Farbwechsels.",
            "label": "Farbeffekt",
            "category": "ColorLight",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "hue:effect",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die aktuelle Beleuchtungsstärke.",
            "label": "Beleuchtungsstärke",
            "itemType": "Number:Illuminance",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:illuminance",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeit, zu der sich dieser Wert geändert hat.",
            "label": "Letzte Aktualisierung",
            "category": "Time",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:last_updated",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Das aktuelle Licht Level.",
            "label": "Licht Level",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:light_level",
            "advanced": true
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht das Ein- und Ausschalten.",
            "label": "Schalter",
            "category": "Light",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [
                "Lighting"
            ],
            "UID": "hue:switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Der zuletzt gedrückte Taster an dem Tap Schalter.",
            "label": "Tap Schalter",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%d",
                "readOnly": true,
                "options": [
                    {
                        "value": "34",
                        "label": "Taste 1"
                    },
                    {
                        "value": "16",
                        "label": "Taste 2"
                    },
                    {
                        "value": "17",
                        "label": "Taste 3"
                    },
                    {
                        "value": "18",
                        "label": "Taste 4"
                    }
                ]
            },
            "tags": [],
            "UID": "hue:tap_switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Triggers when a button is pressed on the tap switch.",
            "label": "Tap Switch Event",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "hue:tap_switch_event",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Die aktuelle Temperatur.",
            "label": "Temperatur",
            "category": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "hue:temperature",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.",
                    "label": "Initial brightness",
                    "name": "onBrightness",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "",
            "label": "Color value (Hue,Saturation,Brightness)",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:colorHSB",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.",
                    "label": "Initial brightness",
                    "name": "onBrightness",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "",
            "label": "Color value (Red,Green,Blue)",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:colorRGB",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Open/Close contact",
            "itemType": "Contact",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:contact",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "Current date and/or time",
            "label": "Date/Time value",
            "itemType": "DateTime",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:datetime",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Percentage value",
            "itemType": "Dimmer",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:dimmer",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "An image to display. Send a binary bmp, jpg, png or any other supported format to this channel.",
            "label": "Image",
            "itemType": "Image",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "mqtt:image",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "description": "GPS coordinates as Latitude,Longitude,Altitude",
            "label": "Location",
            "itemType": "Location",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:location",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Number value",
            "itemType": "Number",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:number",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example \"all/in/#\" or \"sensors/+/config\".",
                    "label": "MQTT Topic",
                    "name": "stateTopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An optional condition on the value of the MQTT topic that must match before this channel is triggered.",
                    "label": "Payload condition",
                    "name": "payload",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The trigger channel payload usually only contains the received MQTT topic value. If you define a separator character, for example '#', the topic and received value will be in the trigger channel payload. For example: my_topic#my_received_value.",
                    "label": "Separator character",
                    "name": "separator",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [],
            "description": "This channel is triggered when a value is published to the configured MQTT topic on this broker connection. The event payload will be the received MQTT topic value.",
            "label": "Publish trigger",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "mqtt:publishTrigger",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"OPEN\") that is recognised as UP state. You can use this parameter for a second keyword, next to UP.",
                    "label": "Up value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"CLOSE\") that is recognised as DOWN state. You can use this parameter for a second keyword, next to DOWN.",
                    "label": "Down value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "STOP",
                    "description": "A string (like \"STOP\") that is recognised as stop state. Will set the rollershutter state to undefined, because the current position is unknown at that point.",
                    "label": "Stop value",
                    "name": "stop",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Rollershutter",
            "itemType": "Rollershutter",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:rollershutter",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "Text value",
            "itemType": "String",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:string",
            "advanced": false
        },
        {
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ],
            "label": "On/Off switch",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "mqtt:switch",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt Zeit/Datum an wann das Gerät zuletzt gesehen wurde.",
            "label": "Zuletzt gesehen",
            "itemType": "DateTime",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:lastseen",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt an wie lange ein Ping in Millisekunden an das Gerät dauert.",
            "label": "Pingzeit",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:latency",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Gibt an ob das Gerät aktuell online oder offline ist.",
            "label": "Online",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "network:online",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle atmosphärische relative Luftfeuchtigkeit.",
            "label": "Luftfeuchtigkeit",
            "category": "Humidity",
            "itemType": "Number:Dimensionless",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.0f %%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:atmospheric-humidity",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktueller Luftdruck.",
            "label": "Luftdruck",
            "category": "Pressure",
            "itemType": "Number:Pressure",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.3f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:barometric-pressure",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Batterieladung",
            "category": "Battery",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "step": 1,
                "pattern": "%.0f %%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:battery-level",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Helligkeit und schaltet das Licht ein und aus.",
            "label": "Helligkeit",
            "category": "DimmableLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d %%",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:brightness",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Taste",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:button",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Lichtfarbe.",
            "label": "Farbe",
            "category": "ColorLight",
            "itemType": "Color",
            "kind": "STATE",
            "tags": [],
            "UID": "system:color",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Steuert die Farbtemperatur des Lichts.",
            "label": "Farbtemperatur",
            "category": "ColorLight",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:color-temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ort in geographischen Koordinaten (Breitengrad/Längengrad/Höhe).",
            "label": "Ort",
            "itemType": "Location",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%2$s°N %3$s°E %1$sm",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:location",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Niedriger Batteriestatus",
            "category": "Battery",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:low-battery",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt den Künstler der (aktuell abgespielten) Video- oder Audiodatei an.",
            "label": "Künstler",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:media-artist",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Fernbedienung",
            "category": "MediaControl",
            "itemType": "Player",
            "kind": "STATE",
            "tags": [],
            "UID": "system:media-control",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt den Titel der (aktuell abgespielten) Video- oder Audiodatei an.",
            "label": "Titel",
            "itemType": "String",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:media-title",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Zeigt eine erkannte Bewegung an.",
            "label": "Bewegung",
            "category": "Motion",
            "itemType": "Switch",
            "kind": "STATE",
            "stateDescription": {
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:motion",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Lautstärke auf stumm zu schalten.",
            "label": "Stumm schalten",
            "category": "SoundVolume",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "system:mute",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Außentemperatur.",
            "label": "Außentemperatur",
            "category": "Temperature",
            "itemType": "Number:Temperature",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:outdoor-temperature",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Betriebsbereitschaft. Das Gerät ist betriebsbereit, wenn \"Betrieb\" den Status ON hat.",
            "label": "Betrieb",
            "itemType": "Switch",
            "kind": "STATE",
            "tags": [],
            "UID": "system:power",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Einfache Taste",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:rawbutton",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Wipptaster",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:rawrocker",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Signalstärke",
            "category": "QualityOfService",
            "itemType": "Number",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 4,
                "step": 1,
                "readOnly": true,
                "options": [
                    {
                        "value": "0",
                        "label": "Kein Signal"
                    },
                    {
                        "value": "1",
                        "label": "Schwach"
                    },
                    {
                        "value": "2",
                        "label": "Durchschnittlich"
                    },
                    {
                        "value": "3",
                        "label": "Gut"
                    },
                    {
                        "value": "4",
                        "label": "Ausgezeichnet"
                    }
                ]
            },
            "tags": [],
            "UID": "system:signal-strength",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "label": "Auslöser",
            "kind": "TRIGGER",
            "tags": [],
            "UID": "system:trigger",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Ermöglicht die Steuerung der Lautstärke.",
            "label": "Lautstärke",
            "category": "SoundVolume",
            "itemType": "Dimmer",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 100,
                "pattern": "%d %%",
                "readOnly": false,
                "options": []
            },
            "tags": [],
            "UID": "system:volume",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Windrichtung ausgedrückt als Winkel.",
            "label": "Windrichtung",
            "category": "Wind",
            "itemType": "Number:Angle",
            "kind": "STATE",
            "stateDescription": {
                "minimum": 0,
                "maximum": 360,
                "pattern": "%.0f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:wind-direction",
            "advanced": false
        },
        {
            "parameters": [],
            "parameterGroups": [],
            "description": "Aktuelle Windgeschwindigkeit.",
            "label": "Windgeschwindigkeit",
            "category": "Wind",
            "itemType": "Number:Speed",
            "kind": "STATE",
            "stateDescription": {
                "pattern": "%.1f %unit%",
                "readOnly": true,
                "options": []
            },
            "tags": [],
            "UID": "system:wind-speed",
            "advanced": false
        }
    ],
    "config-descriptions": [
        {
            "uri": "binding:network",
            "parameters": [
                {
                    "defaultValue": "true",
                    "description": "Allows or disallows to use system pings next to the java integrated ping functionality. On windows the system ping works more reliable most of the time.",
                    "label": "Allow system pings",
                    "name": "allowSystemPings",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "Usually a device requests an IP address in an IPv4 network with the help of DHCP as soon as it enters a network. If we listen to those packets, we can detect a device presence even faster. You need elevated access rights (see readme) for this to work.",
                    "label": "Listen for dhcp requests",
                    "name": "allowDHCPlisten",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "2000",
                    "description": "The result of a device presence detection is cached for a small amount of time. Be aware that no new pings will be issued within this time frame, even if explicitly requested.",
                    "label": "Cache time in ms",
                    "name": "cacheDeviceStateTimeInMS",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "arping",
                    "description": "If your arp ping tool is not called arping and cannot be found in the PATH environment, you can configure the absolute path / tool name here",
                    "label": "ARP ping tool path",
                    "name": "arpPingToolPath",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "channel-type:astro:config",
            "parameters": [
                {
                    "defaultValue": "0",
                    "description": "Moves an event or datetime value forward or backward (in minutes)",
                    "label": "Offset",
                    "name": "offset",
                    "required": false,
                    "type": "INTEGER",
                    "min": -1440,
                    "max": 1440,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The earliest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Earliest",
                    "name": "earliest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The latest time of the day for the event or the datetime value (hh:mm)",
                    "label": "Latest",
                    "name": "latest",
                    "required": false,
                    "type": "TEXT",
                    "pattern": "^([0-1][0-9]|2[0-3])(:[0-5][0-9])$",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "channel-type:mqtt:publishTrigger",
            "parameters": [
                {
                    "description": "This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example \"all/in/#\" or \"sensors/+/config\".",
                    "label": "MQTT Topic",
                    "name": "stateTopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An optional condition on the value of the MQTT topic that must match before this channel is triggered.",
                    "label": "Payload condition",
                    "name": "payload",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The trigger channel payload usually only contains the received MQTT topic value. If you define a separator character, for example '#', the topic and received value will be in the trigger channel payload. For example: my_topic#my_received_value.",
                    "label": "Separator character",
                    "name": "separator",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "io:hueemulation",
            "parameters": [
                {
                    "defaultValue": "false",
                    "description": "Pairing must be enabled to connect a new device. Pairing is automatically disabled after the configured pairing time (usually 60 seconds).",
                    "label": "Device Pairing",
                    "name": "pairingEnabled",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "60",
                    "description": "Pairing is automatically disabled after the given time in seconds.",
                    "label": "Pairing timeout",
                    "name": "pairingTimeout",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The Amazon echos have no means to recreate a new api key and they don't care about the 403-forbidden http status code. If the addon has pruned its known users (reinstall etc), echos will not be able to discover new devices. Set this option to just create new users on the fly on the next pairing mode period.",
                    "label": "Amazon Echo device discovery fix",
                    "name": "createNewUserOnEveryEndpoint",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "Switchable",
                    "description": "The HUE emulation can either publish Switch items if this is set to an empty string or filter items by tags. You can supply multiple tags by separating them with a comma.",
                    "label": "Switch item tags",
                    "name": "restrictToTagsSwitches",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "ColorLighting",
                    "description": "The HUE emulation can either publish all Color items if this is set to an empty string or filter items by tags. You can supply multiple tags by separating them with a comma.",
                    "label": "Color item tags",
                    "name": "restrictToTagsColorLights",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "Lighting",
                    "description": "The HUE emulation can either publish all Dimmer items if this is set to an empty string or filter items by tags. You can supply multiple tags by separating them with a comma.",
                    "label": "White item tags",
                    "name": "restrictToTagsWhiteLights",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your host has multiple IP addresses you may specify the IP you would like to advertise in the UPNP discovery process. You may safely leave this empty on most systems.",
                    "label": "Optional discovery address",
                    "name": "discoveryIp",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Some Hue applications require a different port (80) then what openHAB runs on by default (8080).  This option will only advertise a different port then what we are listening on.  Useful if you have an iptables rule redirect traffic from this port to the openHAB port.",
                    "label": "Optional discovery web port",
                    "name": "discoveryHttpPort",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "metadata:autoupdate",
            "parameters": [
                {
                    "description": "Auto Update",
                    "name": "value",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Enforce an auto update",
                            "value": "true"
                        },
                        {
                            "label": "Veto an auto update",
                            "value": "false"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "misc:lsp",
            "parameters": [
                {
                    "defaultValue": "5007",
                    "description": "The port the language server listens to",
                    "label": "Port",
                    "name": "port",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "mqtt:ha_channel",
            "parameters": [
                {
                    "defaultValue": "",
                    "description": "The json configuration string received by the component via MQTT.",
                    "label": "Json Configuration",
                    "name": "config",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "mqtt:homie_channel",
            "parameters": [
                {
                    "defaultValue": "",
                    "description": "The channels unit",
                    "label": "Unit",
                    "name": "unit",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "",
                    "description": "The channel name",
                    "label": "Name",
                    "name": "name",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "Is this channel writable?",
                    "label": "Settable",
                    "name": "settable",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "If set to false, the resulting channel will be a trigger channel (stateless), useful for non-permanent events. This flag corresponds to the retained option for MQTT publish.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "",
                    "description": "The output format.",
                    "label": "Format",
                    "name": "format",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "unknown",
                    "description": "The data type of this channel.",
                    "label": "Data Type",
                    "name": "datatype",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Integer",
                            "value": "integer_"
                        },
                        {
                            "label": "Float",
                            "value": "float_"
                        },
                        {
                            "label": "Boolean",
                            "value": "boolean_"
                        },
                        {
                            "label": "String",
                            "value": "string_"
                        },
                        {
                            "label": "Enumeration",
                            "value": "enum_"
                        },
                        {
                            "label": "Colour",
                            "value": "color_"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "profile:system:offset",
            "parameters": [
                {
                    "description": "Offset (plain number or number with unit) to be applied on the state towards the item. The negative offset will be applied in the reverse direction.",
                    "label": "Offset",
                    "name": "offset",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:addons",
            "parameters": [
                {
                    "defaultValue": "true",
                    "description": "Defines whether openHAB should access the remote repository for add-on installation.",
                    "label": "Access Remote Repository",
                    "name": "remote",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "Also allows the installation of 1.x bindings for which there is already a 2.x version available (requires remote repo access!).",
                    "label": "Include Legacy 1.x Bindings",
                    "name": "legacy",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:audio",
            "parameters": [
                {
                    "description": "The default audio source to use if no other is specified.",
                    "label": "Default Source",
                    "name": "defaultSource",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The default audio sink to use if no other is specified.",
                    "label": "Default Sink",
                    "name": "defaultSink",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:chart",
            "parameters": [
                {
                    "defaultValue": "240",
                    "description": "Defines the default height in pixels for the chart to build.",
                    "label": "Default Height",
                    "name": "defaultHeight",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "480",
                    "description": "Defines the default width in pixels for the chart to build.",
                    "label": "Default Width",
                    "name": "defaultWidth",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "Defines the scale to apply to the requested chart height (0.5 to divide by 2 for example).",
                    "label": "Scale",
                    "name": "scale",
                    "required": false,
                    "type": "DECIMAL",
                    "min": 0,
                    "stepsize": 0.1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Defines the maximum width in pixels for the chart to build.",
                    "label": "Maximum Width",
                    "name": "maxWidth",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:firmware-status-info-job",
            "parameters": [
                {
                    "description": "The period between successive firmware status info job execution.",
                    "label": "Period",
                    "name": "period",
                    "required": true,
                    "type": "INTEGER",
                    "min": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The time to delay the first firmware status info job execution.",
                    "label": "Delay",
                    "name": "delay",
                    "required": true,
                    "type": "INTEGER",
                    "min": 0,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The time unit of the firmware status info job execution.",
                    "label": "Time unit",
                    "name": "timeUnit",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Seconds",
                            "value": "SECONDS"
                        },
                        {
                            "label": "Minutes",
                            "value": "MINUTES"
                        },
                        {
                            "label": "Hours",
                            "value": "HOURS"
                        },
                        {
                            "label": "Days",
                            "value": "DAYS"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:i18n",
            "parameters": [
                {
                    "description": "<p>The default language that should be used. If not specified, the system default locale is used.</p> <p>The ISO 639 alpha-2 or alpha-3 language code (if there is no alpha-2 one).</p> <p>Example: \"en\" (English), \"de\" (German), \"ja\" (Japanese), \"kok\" (Konkani)</p>",
                    "label": "Language",
                    "name": "language",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "<p>The script that should be used.</p> <p>ISO 15924 alpha-4 script code.</p> <p>Example: \"Latn\" (Latin), \"Cyrl\" (Cyrillic)</p>",
                    "label": "Script",
                    "name": "script",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "<p>The region that should be used.</p> <p>ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code.</p> <p>Example: \"US\" (United States), \"DE\" (Germany), \"FR\" (France), \"029\" (Caribbean)</p>",
                    "label": "Country / Region",
                    "name": "region",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "<p>A variation of the locale.</p> <p>Any arbitrary value used to indicate a variation of a Locale.</p> <p>Example: \"polyton\" (Polytonic Greek), \"POSIX\"</p>",
                    "label": "Variant",
                    "name": "variant",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "<p>A time zone can be set from the user interface.</p> <p>The underlying system's time zone is the default.</p> <p>Example: Asia/Tokyo, Europe/Berlin</p>",
                    "label": "Time Zone",
                    "name": "timezone",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "location",
                    "description": "<p>The location of this installation.</p> <p>Coordinates as &lt;latitude&gt;,&lt;longitude&gt;[&lt;altitude&gt;]</p> <p>Example: \"52.5200066,13.4049540\" (Berlin)</p>",
                    "label": "Location",
                    "name": "location",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The measurement system is used for unit conversion.",
                    "label": "Measurement System",
                    "name": "measurementSystem",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "Metric",
                            "value": "SI"
                        },
                        {
                            "label": "Imperial (US)",
                            "value": "US"
                        }
                    ],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:inbox",
            "parameters": [
                {
                    "defaultValue": "true",
                    "description": "<p>If enabled, an inbox result matching an existing thing is automatically ignored.</p> <p>If set to false, the inbox may contain results although identical things already exist.</p>",
                    "label": "Auto Ignore",
                    "name": "autoIgnore",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If enabled, inbox results are automatically approved, unless they were marked as ignored.",
                    "label": "Auto Approve",
                    "name": "autoApprove",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:json_storage",
            "parameters": [
                {
                    "defaultValue": "5",
                    "description": "Sets the number of backup files to keep.",
                    "label": "Backup files",
                    "name": "backup_files",
                    "required": false,
                    "type": "INTEGER",
                    "min": 0,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "500",
                    "description": "Sets the time to wait before writing changes to disk. This can reduce the number of writes when many changes are being introduced within a short period. Time is defined in milliseconds.",
                    "label": "Write delay",
                    "name": "write_delay",
                    "required": false,
                    "type": "INTEGER",
                    "min": 0,
                    "max": 60000,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "30000",
                    "description": "Sets the maximum period the service will wait to write data to disk in the event that many changes are happening continually.",
                    "label": "Maximum write delay",
                    "name": "max_defer_delay",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1000,
                    "max": 60000,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:links",
            "parameters": [
                {
                    "defaultValue": "true",
                    "description": "<p>In simple mode, links and their according items are automatically created for new Things.</p> <p>If the simple mode is turned off, the user has the full control about which items channels are linked to. Existing links will remain untouched.</p>",
                    "label": "Simple Mode",
                    "name": "autoLinks",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:network",
            "parameters": [
                {
                    "description": "A subnet (e.g. 192.168.1.0/24)",
                    "label": "Primary Address",
                    "name": "primaryAddress",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A broadcast address (e.g. 192.168.1.255)",
                    "label": "Broadcast Address",
                    "name": "broadcastAddress",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "Use only one IP address per interface and family",
                    "label": "Single IP Address per Interface",
                    "name": "useOnlyOneAddress",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "Use IPv6 Addresses if available",
                    "label": "Use IPv6",
                    "name": "useIPv6",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:persistence",
            "parameters": [
                {
                    "description": "The persistence service to use if no other is specified.",
                    "label": "Default Service",
                    "name": "default",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "system:voice",
            "parameters": [
                {
                    "description": "The default text-to-speech service to use if no other is specified.",
                    "label": "Default Text-to-Speech",
                    "name": "defaultTTS",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The default speech-to-text service to use if no other is specified.",
                    "label": "Default Speech-to-Text",
                    "name": "defaultSTT",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The default voice to use if no specific TTS service or voice is specified.",
                    "label": "Default Voice",
                    "name": "defaultVoice",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The default human language interpreter to use if no other is specified.",
                    "label": "Default Human Language Interpreter",
                    "name": "defaultHLI",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The default keyword spotting service to use if no other is specified.",
                    "label": "Default Keyword Spotter",
                    "name": "defaultKS",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The magic word to spot before initiating a dialog.",
                    "label": "Magic Word",
                    "name": "keyword",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "item",
                    "description": "If provided, the item will be switched on during the period when the dialog processor has spotted the keyword and is listening for commands.",
                    "label": "Listening switch",
                    "name": "listeningItem",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": [
                        {
                            "value": "Switch",
                            "name": "type"
                        }
                    ]
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:astro:config",
            "parameters": [
                {
                    "context": "location",
                    "description": "The latitude, longitude and altitude separated with a comma (lat,long,[alt])",
                    "label": "Location",
                    "name": "geolocation",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "300",
                    "description": "Refresh interval for positional data calculation in seconds.",
                    "label": "Interval",
                    "name": "interval",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 86400,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:consumptionsensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:daylightsensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:deconz",
            "parameters": [
                {
                    "context": "network-address",
                    "description": "IP address or host name and port",
                    "label": "Host Address",
                    "name": "host",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If no API Key is provided, a new one will be requested. You need to authorize the access on the deCONZ web interface.",
                    "label": "API Key",
                    "name": "apikey",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:humiditysensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:lightsensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:openclosesensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:powersensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:presencesensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:pressuresensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:switch",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:temperaturesensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:deconz:waterleakagesensor",
            "parameters": [
                {
                    "description": "The deCONZ bridge assigns an integer number ID to each sensor.",
                    "label": "Sensor ID",
                    "name": "id",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0000",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Lampe.",
                    "label": "ID der Lampe",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0010",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Steckdose.",
                    "label": "ID der Steckdose",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0100",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Lampe.",
                    "label": "ID der Lampe",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0106",
            "parameters": [
                {
                    "description": "ID zur Identifikation des Sensors.",
                    "label": "ID des Sensors",
                    "name": "sensorId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert den Sensor.",
                    "label": "Sensor Status",
                    "name": "on",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert die LED-Anzeige des Sensors.",
                    "label": "LED-Anzeige",
                    "name": "ledindication",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "16000",
                    "description": "Zeigt den Dunkel-Schwellwert an.",
                    "label": "Dunkel-Schwellwert",
                    "name": "tholddark",
                    "required": false,
                    "type": "INTEGER",
                    "min": 0,
                    "stepsize": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "7000",
                    "description": "Zeigt den Hell-Schwellwert an.",
                    "label": "Hell-Schwellwert",
                    "name": "tholdoffset",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "stepsize": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0107",
            "parameters": [
                {
                    "description": "ID zur Identifikation des Sensors.",
                    "label": "ID des Sensors",
                    "name": "sensorId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert den Sensor.",
                    "label": "Sensor Status",
                    "name": "on",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert die LED-Anzeige des Sensors.",
                    "label": "LED-Anzeige",
                    "name": "ledindication",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Zeigt die Empfindlichkeit an.",
                    "label": "Empfindlichkeit",
                    "name": "sensitivity",
                    "required": false,
                    "type": "INTEGER",
                    "min": 0,
                    "stepsize": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Zeigt die maximale Empfindlichkeit an.",
                    "label": "Maximale Empfindlichkeit",
                    "name": "sensitivitymax",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": true,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0110",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Steckdose.",
                    "label": "ID der Steckdose",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0200",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Lampe.",
                    "label": "ID der Lampe",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0210",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Lampe.",
                    "label": "ID der Lampe",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0220",
            "parameters": [
                {
                    "description": "ID zur Identifikation der Lampe.",
                    "label": "ID der Lampe",
                    "name": "lightId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0302",
            "parameters": [
                {
                    "description": "ID zur Identifikation des Sensors.",
                    "label": "ID des Sensors",
                    "name": "sensorId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert den Sensor.",
                    "label": "Sensor Status",
                    "name": "on",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert die LED-Anzeige des Sensors.",
                    "label": "LED-Anzeige",
                    "name": "ledindication",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0820",
            "parameters": [
                {
                    "description": "ID zur Identifikation des Sensors.",
                    "label": "ID des Sensors",
                    "name": "sensorId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert den Sensor.",
                    "label": "Sensor Status",
                    "name": "on",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:0830",
            "parameters": [
                {
                    "description": "ID zur Identifikation des Sensors.",
                    "label": "ID des Sensors",
                    "name": "sensorId",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Aktiviert oder deaktiviert den Sensor.",
                    "label": "Sensor Status",
                    "name": "on",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:hue:bridge",
            "parameters": [
                {
                    "context": "network-address",
                    "description": "Lokale IP-Adresse oder Hostname der Hue Bridge.",
                    "label": "IP-Adresse",
                    "name": "ipAddress",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "password",
                    "description": "Benutzer zur Authentifizierung an der Hue Bridge.",
                    "label": "Benutzer",
                    "name": "userName",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "Intervall zur Abfrage der Hue Bridge (in Sekunden).",
                    "label": "Abfrageintervall",
                    "name": "pollingInterval",
                    "required": true,
                    "type": "INTEGER",
                    "min": 1,
                    "stepsize": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "unit": "s",
                    "unitLabel": "Sekunden",
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "500",
                    "description": "Intervall zur Abfrage der Sensoren der Hue Bridge (in Millisekunden).",
                    "label": "Sensor-Abfrageintervall",
                    "name": "sensorPollingInterval",
                    "required": true,
                    "type": "INTEGER",
                    "min": 50,
                    "stepsize": 1,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "unit": "ms",
                    "unitLabel": "Millisekunden",
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:mqtt:broker",
            "parameters": [
                {
                    "context": "network-address",
                    "description": "The IP/Hostname of the MQTT broker",
                    "label": "Broker Hostname/IP",
                    "name": "host",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "network-address",
                    "description": "The port is optional, if none is provided, the typical ports 1883 and 8883 (SSL) are used.",
                    "label": "Broker Port",
                    "name": "port",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "Uses TLS/SSL to establish a secure connection to the broker.",
                    "label": "Secure connection",
                    "name": "secure",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "label": "Quality of Service",
                    "name": "qos",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "At most once (0)",
                            "value": "0"
                        },
                        {
                            "label": "At least once (1)",
                            "value": "1"
                        },
                        {
                            "label": "Exactly once (2)",
                            "value": "2"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "description": "Use a fixed client ID. Defaults to empty which means a client ID is generated for this connection.",
                    "label": "Client ID",
                    "name": "clientID",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "Retained messages are stored on the MQTT broker and other clients can retrieve the value at any time",
                    "label": "Retain messages",
                    "name": "retain",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "60000",
                    "description": "Reconnect time in ms. If a connection is lost, the binding will wait this time before it tries to reconnect.",
                    "label": "Reconnect time",
                    "name": "reconnect_time",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "60000",
                    "description": "Keep alive / heartbeat timer in ms. It can take up to this time to determine if a server connection is lost. A lower value may keep the broker unnecessarily busy for no or little additional value.",
                    "label": "Heartbeat",
                    "name": "keep_alive_time",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "The last will message.",
                    "label": "Last will message",
                    "name": "lastwill_message",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Defaults to empty and therefore disables the last will.",
                    "label": "Last will topic",
                    "name": "lastwill_topic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "The quality of service parameter of the last will.",
                    "label": "Last will QoS",
                    "name": "lastwill_qos",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [
                        {
                            "label": "At most once (0)",
                            "value": "0"
                        },
                        {
                            "label": "At least once (1)",
                            "value": "1"
                        },
                        {
                            "label": "Exactly once (2)",
                            "value": "2"
                        }
                    ],
                    "filterCriteria": []
                },
                {
                    "description": "The MQTT username",
                    "label": "Username",
                    "name": "username",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "context": "password",
                    "description": "The MQTT password",
                    "label": "Password",
                    "name": "password",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "If this and SSL is set: After the next connection has been successfully established, the certificate is pinned. The connection will be refused if another certificate is used. Clear **certificate** to allow a new certificate for the next connection attempt. This option can increase security.",
                    "label": "Certificate pinning",
                    "name": "certificatepin",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If **certificatepin** is set this hash is used to verify the connection. Clear to allow a new certificate pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`.",
                    "label": "Certificate hash",
                    "name": "certificate",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "true",
                    "description": "If this and SSL is set: After the next connection has been successfully established, the public key of the broker is pinned. The connection will be refused if another public key is used. Clear **publickey** to allow a new public key for the next connection attempt. This option can increase security.",
                    "label": "Public key pinning",
                    "name": "publickeypin",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If **publickeypin** is set this hash is used to verify the connection. Clear to allow a new public key pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`",
                    "label": "Public Key Hash",
                    "name": "publickey",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:mqtt:color_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "10",
                    "description": "If you connect this channel to a Switch item and turn it on, color and saturation are preserved from the last state, but the brightness will be set to this configured initial brightness percentage.",
                    "label": "Initial brightness",
                    "name": "onBrightness",
                    "required": false,
                    "type": "INTEGER",
                    "min": 1,
                    "max": 100,
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:dimmer_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:homeassistant",
            "parameters": [
                {
                    "description": "HomeAssistant Object ID",
                    "label": "Object ID",
                    "name": "objectid",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "homeassistant",
                    "description": "MQTT base prefix",
                    "label": "MQTT base prefix",
                    "name": "basetopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:mqtt:homie300",
            "parameters": [
                {
                    "description": "Homie Device ID. This is part of the MQTT topic, e.g. \"homie/deviceid/$homie\".",
                    "label": "Device ID",
                    "name": "deviceid",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "homie",
                    "description": "MQTT base prefix",
                    "label": "MQTT base prefix",
                    "name": "basetopic",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:mqtt:number_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the minimum of the allowed range. For a percentage channel that equals zero percent.",
                    "label": "Absolute minimum",
                    "name": "min",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "This configuration represents the maximum of the allowed range. For a percentage channel that equals one-hundred percent.",
                    "label": "Absolute maximum",
                    "name": "max",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1.0",
                    "description": "A number/dimmer channel can receive Increase/Decrease commands and computes the target number by adding or subtracting this delta value.",
                    "label": "Delta value",
                    "name": "step",
                    "required": false,
                    "type": "DECIMAL",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:rollershutter_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"OPEN\") that is recognised as UP state. You can use this parameter for a second keyword, next to UP.",
                    "label": "Up value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "A string (like \"CLOSE\") that is recognised as DOWN state. You can use this parameter for a second keyword, next to DOWN.",
                    "label": "Down value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "STOP",
                    "description": "A string (like \"STOP\") that is recognised as stop state. Will set the rollershutter state to undefined, because the current position is unknown at that point.",
                    "label": "Stop value",
                    "name": "stop",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:string_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                    "label": "Allowed states",
                    "name": "allowedStates",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:switch_channel",
            "parameters": [
                {
                    "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the channel will be state-less command-only channel.",
                    "label": "MQTT state topic",
                    "name": "stateTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "An MQTT topic that this thing will send a command to. If not set, this will be a read-only switch.",
                    "label": "MQTT command topic",
                    "name": "commandTopic",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies transformations to an incoming MQTT topic value. A transformation example for a received JSON would be \"JSONPATH:$.device.status.temperature\" for a json {device: {status: { temperature: 23.2 }}}. You can chain transformations by separating them with the intersection character ∩.",
                    "label": "Incoming value transformations",
                    "name": "transformationPattern",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "description": "Applies a transformation before publishing a MQTT topic value. Transformations are specialised in extracting a value, but some transformations like the MAP one could be useful.",
                    "label": "Outgoing value transformation",
                    "name": "transformationPatternOut",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "%s",
                    "description": "Format a value before it is published to the MQTT broker. The default is to just pass the channel/item state. If you want to apply a prefix, say \"MYCOLOR,\", you would use \"MYCOLOR,%s\". If you want to adjust the precision of a number to for example 4 digits, you would use \"%.4f\".",
                    "label": "Outgoing value format",
                    "name": "formatBeforePublish",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "groupName": "transformations",
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "The value will be published to the command topic as retained message. A retained value stays on the broker and can even be seen by MQTT clients that are subscribing at a later point in time.",
                    "label": "Retained",
                    "name": "retained",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "If the received MQTT value should not only update the state of linked items, but command them, enable this option.",
                    "label": "Is command",
                    "name": "postCommand",
                    "required": false,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "A number (like 1, 10) or a string (like \"enabled\") that is additionally recognised as on/open state. You can use this parameter for a second keyword, next to ON (OPEN respectively on a Contact).",
                    "label": "Custom On/Open value",
                    "name": "on",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "0",
                    "description": "A number (like 0, -10) or a string (like \"disabled\") that is additionally recognised as off/closed state. You can use this parameter for a second keyword, next to OFF (CLOSED respectively on a Contact).",
                    "label": "Custom Off/Closed value",
                    "name": "off",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": [
                {
                    "name": "transformations",
                    "advanced": true,
                    "label": "Transform values",
                    "description": "These configuration parameters allow you to alter a value before it is published to MQTT or before a received value is assigned to an item."
                }
            ]
        },
        {
            "uri": "thing-type:mqtt:systemBroker",
            "parameters": [
                {
                    "description": "Each system wide configured MQTT broker has a unique broker ID.",
                    "label": "Broker ID",
                    "name": "brokerid",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:network:pingdevice",
            "parameters": [
                {
                    "description": "Hostname oder IP des Netzwerkgerätes",
                    "label": "Hostname oder IP",
                    "name": "hostname",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "60000",
                    "description": "Spezifiziert den Aktualisierungsintervall (in ms)",
                    "label": "Aktualisierungsintervall",
                    "name": "refreshInterval",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "Gibt an, wie oft der PING wiederholt werden soll, bevor das Gerät als offline markiert wird.",
                    "label": "Wiederholen",
                    "name": "retry",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "5000",
                    "description": "Gibt an, wie lange maximal gewartet wird (in ms), bevor ein Gerät als nicht vorhanden gekennzeichnet wird.",
                    "label": "Zeitlimit",
                    "name": "timeout",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "thing-type:network:servicedevice",
            "parameters": [
                {
                    "description": "Hostname oder IP des Netzwerkgerätes",
                    "label": "Hostname oder IP",
                    "name": "hostname",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "80",
                    "description": "Der TCP Port an dem das Gerät erreichbar ist. Muss größer 0 sein.",
                    "label": "Port",
                    "name": "port",
                    "required": true,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "1",
                    "description": "Gibt an, wie oft der Verbindungsversuch wiederholt werden soll, bevor das Gerät als offline markiert wird.",
                    "label": "Wiederholen",
                    "name": "retry",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "5000",
                    "description": "Gibt an, wie lange maximal gewartet wird (in ms), bevor ein Gerät als nicht vorhanden gekennzeichnet wird.",
                    "label": "Zeitlimit",
                    "name": "timeout",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "60000",
                    "description": "Spezifiziert das Aktualisierungsintervall (in ms)",
                    "label": "Aktualisierungsintervall",
                    "name": "refreshInterval",
                    "required": false,
                    "type": "INTEGER",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "ui:habpanel",
            "parameters": [
                {
                    "context": "script",
                    "description": "JSON object containing the registry of panel configurations. Normally only modified with the embedded designer, edit by hand at your own risk!",
                    "label": "Panel registry JSON",
                    "name": "panelsRegistry",
                    "required": true,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": true,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "false",
                    "description": "Edit mode is unavailable in the UI when enabled. Keeping the configuration locked and unlocking only when needed helps prevent accidental changes.",
                    "label": "Lock editing",
                    "name": "lockEditing",
                    "required": true,
                    "type": "BOOLEAN",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                },
                {
                    "defaultValue": "",
                    "description": "The name of the existing panel configuration to switch to initially when accessing HABPanel with no prior local configuration.",
                    "label": "Initial panel configuration",
                    "name": "initialPanelConfig",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": []
                }
            ],
            "parameterGroups": []
        },
        {
            "uri": "voice:rulehli",
            "parameters": [
                {
                    "context": "item",
                    "defaultValue": "VoiceCommand",
                    "description": "The string item to pass voice commands to.",
                    "label": "Voice Command Item",
                    "name": "item",
                    "required": false,
                    "type": "TEXT",
                    "readOnly": false,
                    "multiple": false,
                    "advanced": false,
                    "verify": false,
                    "limitToOptions": true,
                    "options": [],
                    "filterCriteria": [
                        {
                            "value": "String",
                            "name": "type"
                        }
                    ]
                }
            ],
            "parameterGroups": []
        }
    ],
    "discovery": [
        {
            "id": "astro",
            "background": true,
            "duration": 60,
            "activeRemaining": 0
        },
        {
            "id": "deconz",
            "background": true,
            "duration": 60,
            "activeRemaining": 0
        },
        {
            "id": "hue",
            "background": true,
            "duration": 60,
            "activeRemaining": 0
        },
        {
            "id": "mqtt",
            "background": true,
            "duration": 60,
            "activeRemaining": 0
        },
        {
            "id": "network",
            "background": false,
            "duration": 60,
            "activeRemaining": 40
        }
    ],
    "extensions": [],
    "manualextensions": [
        {
            "id": "binding-airvisualnode",
            "label": "AirVisual Node Binding",
            "filepath": "binding-airvisualnode-2.4.0.SNAPSHOT.jar",
            "version": "2.4.0.SNAPSHOT",
            "link": "https://www.openhab.org/addons/bindings/airvisualnode/",
            "enabled": true,
            "installed": 1546950221013,
            "type": "binding"
        },
        {
            "id": "binding-avmfritz",
            "label": "AVM FRITZ!Box Binding",
            "filepath": "binding-avmfritz-2.4.0.SNAPSHOT.jar",
            "version": "2.4.0.SNAPSHOT",
            "link": "https://www.openhab.org/addons/bindings/avmfritz/",
            "enabled": true,
            "installed": 1546950225013,
            "type": "binding"
        },
        {
            "id": "webinterface",
            "label": "Paper UI NG Alpha",
            "filepath": "webinterface-paperui-ng-0.1.zip",
            "version": "0.1",
            "link": "https://davidgraeff.github.io/paperui-ng/",
            "enabled": true,
            "installed": 1546950125013,
            "type": "webinterface"
        }
    ],
    "scripts": [
        {
            "filename": "a_script_file.js",
            "name": "My first rule"
        }
    ],
    "schedule": [
        {
            "editable": true,
            "label": "My wakeup timer",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 5,
            "remainingRuns": null,
            "cronExpression": "0 7 ? * MON-FRI",
            "type": "cron",
            "enabled": true,
            "UID": "timer:3edb5737",
            "lastrun": 1546950225013
        },
        {
            "editable": true,
            "label": "Garden watering",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 17,
            "remainingRuns": null,
            "cronExpression": "0 30 10-13 ? * WED,FRI",
            "type": "cron",
            "enabled": true,
            "UID": "timer:4263ds53",
            "lastrun": 1546950225013
        },
        {
            "editable": true,
            "label": "An absolut timer",
            "tags": [
                "Lighting"
            ],
            "totalRuns": 0,
            "remainingRuns": 1,
            "datetime": "2008-09-15T15:53:00",
            "type": "fixed",
            "enabled": true,
            "UID": "timer:4263ds54",
            "lastrun": 1546950225013
        }
    ],
    "inbox": [
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Wohnzimmerlichterkette",
            "properties": {
                "lightId": "10",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0d:3d:5b-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:10",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Esszimmerlichterkette",
            "properties": {
                "lightId": "11",
                "modelId": "Plug_01",
                "uniqueId": "7c:b0:3e:aa:00:a7:3b:a6-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:11",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Spüle",
            "properties": {
                "lightId": "41",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0f:39:09-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:41",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Arbeitsfläche",
            "properties": {
                "lightId": "8",
                "modelId": "Plug_01",
                "uniqueId": "84:18:26:00:00:0d:19:74-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:8",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Lichterkette",
            "properties": {
                "lightId": "9",
                "modelId": "Plug_01",
                "uniqueId": "7c:b0:3e:aa:00:a7:52:a2-03"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0010:00212EFFFF022B51:9",
            "thingTypeUID": "hue:0010"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach1",
            "properties": {
                "lightId": "1",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:97:33:c1-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:1",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Fenster",
            "properties": {
                "lightId": "14",
                "modelId": "TRADFRI_bulb_E27_W_opal_1000lm",
                "uniqueId": "00:0b:57:ff:fe:47:94:02-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:14",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach2",
            "properties": {
                "lightId": "2",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:51:eb:d0-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:2",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Klavier 1",
            "properties": {
                "lightId": "21",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:ba:4b:e9-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:21",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Klavier 2",
            "properties": {
                "lightId": "22",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:3f:74-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:22",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Kühlschrank",
            "properties": {
                "lightId": "23",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:3f:7f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:23",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 1",
            "properties": {
                "lightId": "24",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:52:09:e8-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:24",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 2",
            "properties": {
                "lightId": "25",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:a0:e9:e4-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:25",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 3",
            "properties": {
                "lightId": "26",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:ba:53:29-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:26",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Treppe 4",
            "properties": {
                "lightId": "27",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:9d:0f:e2-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:27",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 4",
            "properties": {
                "lightId": "28",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:9a:4f:0f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:28",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach3",
            "properties": {
                "lightId": "3",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:44:bd-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:3",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 1",
            "properties": {
                "lightId": "30",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8d:e9:da-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:30",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Obere Etage 2",
            "properties": {
                "lightId": "31",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:97:44:09-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:31",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 2",
            "properties": {
                "lightId": "34",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:62:b7-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:34",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Obere Etage 1",
            "properties": {
                "lightId": "35",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8d:ea:04-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:35",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Flur 3",
            "properties": {
                "lightId": "39",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:51:eb:8a-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:39",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach4",
            "properties": {
                "lightId": "4",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:8a:e7:60-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:4",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Schrank",
            "properties": {
                "lightId": "40",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:84:55:5a-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:40",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach5",
            "properties": {
                "lightId": "5",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:96:66:56-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:5",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Dach6",
            "properties": {
                "lightId": "6",
                "modelId": "TRADFRI_bulb_GU10_W_400lm",
                "uniqueId": "00:0b:57:ff:fe:af:33:b2-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0100:00212EFFFF022B51:6",
            "thingTypeUID": "hue:0100"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Kerze",
            "properties": {
                "lightId": "13",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "90:fd:9f:ff:fe:05:4b:93-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:13",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Ecke",
            "properties": {
                "lightId": "15",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "90:fd:9f:ff:fe:0e:70:52-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:15",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Löwe",
            "properties": {
                "lightId": "16",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "00:0b:57:ff:fe:bf:49:db-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:16",
            "thingTypeUID": "hue:0220"
        },
        {
            "bridgeUID": "hue:bridge:00212EFFFF022B51",
            "flag": "NEW",
            "label": "Laterne",
            "properties": {
                "lightId": "17",
                "modelId": "TRADFRI_bulb_E27_WS_opal_980lm",
                "uniqueId": "00:0b:57:ff:fe:ee:c1:5f-01"
            },
            "representationProperty": "uniqueId",
            "thingUID": "hue:0220:00212EFFFF022B51:17",
            "thingTypeUID": "hue:0220"
        }
    ],
    "items": [
        {
            "link": "https://192.168.1.8/rest/items/GenericMQTTThing_ADemoTextChannel",
            "state": "NULL",
            "stateDescription": {
                "pattern": "%s ",
                "readOnly": false,
                "options": []
            },
            "editable": true,
            "type": "String",
            "name": "GenericMQTTThing_ADemoTextChannel",
            "label": "A demo text channel",
            "category": "Lighting",
            "tags": [],
            "groupNames": []
        }
    ],
    "links": [],
    "module-types": [],
    "persistence": [
        {
            "uid": "30179c6a-2a3c-4435-a7ff-c7448e6df17d",
            "annotation": "Allows an overview of when my items updated to a new value",
            "label": "InfluxDB History",
            "items": [],
            "stategy": {
                "label": "every update"
            }
        },
        {
            "uid": "66e7b0d9-3de6-479a-9873-a5347878923d",
            "annotation": "Restores all my items on startup",
            "label": "MapDB Restore",
            "items": [],
            "stategy": {
                "label": "restore on startup"
            }
        },
        {
            "uid": "790073db-6a9a-46f8-8ff2-876c37d7afb7",
            "annotation": "Does this and that",
            "label": "rrd4j Charting",
            "items": [],
            "stategy": {
                "label": "cron strategy"
            }
        },
        {
            "uid": "8c7e5ce1-578c-4ac4-bc9e-fd20ab6be70e",
            "annotation": "Stores all items to mapDB for a later restart",
            "label": "MapDB Restore",
            "items": [],
            "stategy": {
                "label": "every change"
            }
        },
        {
            "uid": "e7773915-cd05-4376-813f-b35de6a98bf2",
            "annotation": "Used for charting",
            "label": "InfluxDB Charting",
            "items": [],
            "stategy": {
                "label": "every change"
            }
        }
    ],
    "persistence-services": [
        {
            "id": "dynamodb",
            "description": "This service allows you to persist state updates using the Amazon DynamoDB database. ",
            "label": "Amazon DynamoDB Persistence",
            "configDescriptionURI": "persistence:dynamodb"
        },
        {
            "id": "influxdb",
            "description": "This service allows you to persist and query states using the InfluxDB time series database.",
            "label": "InfluxDB",
            "configDescriptionURI": "persistence:influxdb"
        },
        {
            "id": "jpa",
            "description": "This service allows you to persist state updates using a SQL or NoSQL database through the Java Persistence API",
            "label": "Java Persistence API",
            "configDescriptionURI": "persistence:jpa"
        },
        {
            "id": "mapdb",
            "description": "The mapdb Persistence Service is based on simple key-value store that only saves the last value. The intention is to use this for restoreOnStartup items because all other persistence options have their drawbacks if values are only needed for reload.",
            "label": "mapdb",
            "configDescriptionURI": "persistence:mapdb"
        },
        {
            "id": "rrd4j",
            "description": "rrd4j is a round-robin database and does not grow in size - it has a fixed allocated size, which is used. This is accomplished by doing data compression, which means that the older the data is, the less values are available. So while you might have a value every minute for the last 24 hours, you might only have one every day for the last year.",
            "label": "rrd4j",
            "configDescriptionURI": "persistence:rrd4j"
        }
    ],
    "profile-types": [],
    "rules": [],
    "services": [
        {
            "id": "org.eclipse.smarthome.audio",
            "label": "Audio",
            "category": "system",
            "configDescriptionURI": "system:audio",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.chart",
            "label": "Charts",
            "category": "system",
            "configDescriptionURI": "system:chart",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.core.i18nprovider",
            "label": "Regional Settings",
            "category": "system",
            "configDescriptionURI": "system:i18n",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.inbox",
            "label": "Inbox",
            "category": "system",
            "configDescriptionURI": "system:inbox",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.links",
            "label": "Item Linking",
            "category": "system",
            "configDescriptionURI": "system:links",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.lsp",
            "label": "Language Server (LSP)",
            "category": "misc",
            "configDescriptionURI": "misc:lsp",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.mqttbroker",
            "label": "MQTT system broker connection",
            "category": "MQTT",
            "configDescriptionURI": "mqtt:systemBrokerConnectionInstance",
            "multiple": true
        },
        {
            "id": "org.eclipse.smarthome.network",
            "label": "Network Settings",
            "category": "system",
            "configDescriptionURI": "system:network",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.persistence",
            "label": "Persistence",
            "category": "system",
            "configDescriptionURI": "system:persistence",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.rulehli",
            "label": "Rule Voice Interpreter",
            "category": "voice",
            "configDescriptionURI": "voice:rulehli",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.storage.json",
            "label": "Json Storage",
            "category": "system",
            "configDescriptionURI": "system:json_storage",
            "multiple": false
        },
        {
            "id": "org.eclipse.smarthome.voice",
            "label": "Voice",
            "category": "system",
            "configDescriptionURI": "system:voice",
            "multiple": false
        },
        {
            "id": "org.openhab.addons",
            "label": "Add-on Management",
            "category": "system",
            "configDescriptionURI": "system:addons",
            "multiple": false
        },
        {
            "id": "org.openhab.habpanel",
            "label": "HABPanel",
            "category": "ui",
            "configDescriptionURI": "ui:habpanel",
            "multiple": false
        },
        {
            "id": "org.openhab.hueemulation",
            "label": "Hue Emulation",
            "category": "io",
            "configDescriptionURI": "io:hueemulation",
            "multiple": false
        }
    ],
    "service-config": [],
    "templates": [],
    "thing-types": [
        {
            "UID": "astro:moon",
            "label": "Astronomische Monddaten",
            "description": "Stellt astronomische Monddaten zur Verfügung",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "astro:sun",
            "label": "Astronomische Sonnendaten",
            "description": "Stellt astronomische Sonnendaten zur Verfügung",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "deconz:consumptionsensor",
            "label": "Consumption Sensor",
            "description": "A consumption sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:daylightsensor",
            "label": "Daylight Sensor",
            "description": "A daylight sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:deconz",
            "label": "Deconz",
            "description": "A running deCONZ software instance",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "deconz:humiditysensor",
            "label": "Humidity Sensor",
            "description": "A humidity sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:lightsensor",
            "label": "Light Sensor",
            "description": "A light sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:openclosesensor",
            "label": "Open/Close Sensor",
            "description": "A open/close sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:powersensor",
            "label": "Power Sensor",
            "description": "A power sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:presencesensor",
            "label": "Presence Sensor",
            "description": "A Presence sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:pressuresensor",
            "label": "Pressure Sensor",
            "description": "A pressure senor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:switch",
            "label": "Switch/Button",
            "description": "A switch or button",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:temperaturesensor",
            "label": "Temperature Sensor",
            "description": "A temperature sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "deconz:waterleakagesensor",
            "label": "Water Leakage Sensor",
            "description": "A water leakage sensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "deconz:deconz"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0000",
            "label": "Lampe (weiß)",
            "description": "Lampe zum Ein- und Ausschalten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0010",
            "label": "Schaltbare Steckdose",
            "description": "Steckdose zum Ein- und Ausschalten von herkömmlichen Lampen oder anderen elektronischen Geräten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0100",
            "label": "Dimmbare Lampe (weiß)",
            "description": "Dimmbare Lampe mit fester Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0106",
            "label": "Lichtstärkesensor",
            "description": "Lichtstärkesensor mit einstellbaren Schwellwerten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0107",
            "label": "Bewegungsmelder",
            "description": "Bewegungsmelder mit einstellbarer Sensitivität.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0110",
            "label": "Dimmbare Steckdose",
            "description": "Steckdose zum Dimmen von herkömmlichen Lampen.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0200",
            "label": "Farbige Lampe",
            "description": "Dimmbare Lampe mit einstellbarer Farbe.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0210",
            "label": "Farbige Lampe",
            "description": "Dimmbare Lampe mit einstellbarer Farbe und Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0220",
            "label": "Farbtemperatur Lampe (weiß)",
            "description": "Dimmbare Lampe mit einstellbarer Farbtemperatur.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0302",
            "label": "Temperatursensor",
            "description": "Temperatursensor",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0820",
            "label": "Dimmschalter",
            "description": "Fernbedienung mit Dimmfunktion.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:0830",
            "label": "Tap Schalter",
            "description": "Fernbedienung mit konfigurierbaren Tasten.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "hue:bridge"
            ],
            "bridge": false
        },
        {
            "UID": "hue:bridge",
            "label": "Hue Bridge",
            "description": "Philips Hue Bridge.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:broker",
            "label": "MQTT Broker",
            "description": "A connection to a MQTT broker",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:homeassistant",
            "label": "HomeAssistant MQTT Component",
            "description": "You need a configured Broker first. This Thing represents a device, that follows the \"HomeAssistant MQTT Component\" specification.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "mqtt:homie300",
            "label": "Homie MQTT device",
            "description": "You need a configured Broker first. This thing represents a device, that follows the \"MQTT Homie Convention\" (Version 3.x).",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "mqtt:systemBroker",
            "label": "System MQTT Broker",
            "description": "A system configured and therefore read-only broker connection. Properties are reflecting the configuration and internal connection status.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": true
        },
        {
            "UID": "mqtt:topic",
            "label": "Generic MQTT Thing",
            "description": "You need a configured Broker first. Dynamically add channels of various types to this Thing. Link different MQTT topics to each channel.",
            "listed": true,
            "supportedBridgeTypeUIDs": [
                "mqtt:broker",
                "mqtt:systemBroker"
            ],
            "bridge": false
        },
        {
            "UID": "network:pingdevice",
            "label": "Pingable Netzwerkgerät",
            "description": "Die Verfügbarkeit des Geräts wird mit ICMP Ping, ARP Ping und DHCP Paketen festgestellt.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        },
        {
            "UID": "network:servicedevice",
            "label": "Netzwerkgerät mit Dienst",
            "description": "Die Verfügbarkeit des Geräts wird durch einen Verbindungsversuch mit dem angegeben TCP Dienst festgestellt.",
            "listed": true,
            "supportedBridgeTypeUIDs": [],
            "bridge": false
        }
    ],
    "things": [
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "Deconz",
            "configuration": {
                "apikey": "FB21485BC2",
                "host": "192.168.1.8:8081"
            },
            "properties": {
                "ipaddress": "192.168.1.8",
                "fwversion": "0x261f0500",
                "zigbeechannel": "15",
                "apiversion": "1.0.9",
                "swversion": "2.5.25",
                "uuid": "d14660d5-d84b-4a91-8f8e-56cb4a3b04e2"
            },
            "UID": "deconz:deconz:ba6f9e51",
            "thingTypeUID": "deconz:deconz",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "UNINITIALIZED",
                "statusDetail": "DISABLED"
            },
            "editable": true,
            "label": "Philips hue (192.168.1.8) compatible Wireless Light Control Gateway",
            "configuration": {
                "ipAddress": "192.168.1.8:8081",
                "pollingInterval": 10,
                "sensorPollingInterval": 5000000
            },
            "properties": {
                "serialNumber": "b827ebfbe782",
                "firmwareVersion": "2.5.25",
                "vendor": "Philips"
            },
            "UID": "hue:bridge:00212EFFFF022B51",
            "thingTypeUID": "hue:bridge",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "MQTT Broker",
            "configuration": {
                "publickeypin": true,
                "lastwill_qos": 0,
                "clientid": "paho9999801975208383",
                "retain": true,
                "secure": false,
                "certificatepin": true,
                "keep_alive_time": 60000,
                "password": "elch1fahne",
                "qos": 0,
                "host": "localhost",
                "reconnect_time": 60000
            },
            "properties": {},
            "UID": "mqtt:broker:f0fbc884",
            "thingTypeUID": "mqtt:broker",
            "channels": []
        },
        {
            "statusInfo": {
                "status": "ONLINE",
                "statusDetail": "NONE"
            },
            "editable": true,
            "label": "Generic MQTT Thing",
            "bridgeUID": "mqtt:broker:f0fbc884",
            "configuration": {},
            "properties": {},
            "UID": "mqtt:topic:605a1c38",
            "thingTypeUID": "mqtt:topic",
            "channels": [
                {
                    "linkedItems": [
                        "GenericMQTTThing_ADemoTextChannel"
                    ],
                    "uid": "mqtt:topic:605a1c38:demochannel",
                    "id": "demochannel",
                    "channelTypeUID": "mqtt:string",
                    "itemType": "String",
                    "kind": "STATE",
                    "label": "A demo text channel",
                    "defaultTags": [],
                    "properties": {},
                    "configuration": {
                        "commandTopic": "demo/cmd",
                        "stateTopic": "demo/state"
                    }
                }
            ]
        }
    ],
    "voice-interpreters": []
}